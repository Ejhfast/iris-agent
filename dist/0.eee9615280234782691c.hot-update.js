webpackHotUpdate(0,{

/***/ 491:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _reactDataGrid = __webpack_require__(402);\n\nvar _reactDataGrid2 = _interopRequireDefault(_reactDataGrid);\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _types = __webpack_require__(73);\n\nvar proptypes = _interopRequireWildcard(_types);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Class to define speadsheet-like data for Iris\n// Todo: some of these should be refactored, as it is repeated in TableSelectMessage\nvar CollectionMessage = function (_Component) {\n  _inherits(CollectionMessage, _Component);\n\n  function CollectionMessage() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, CollectionMessage);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CollectionMessage.__proto__ || Object.getPrototypeOf(CollectionMessage)).call.apply(_ref, [this].concat(args))), _this), _this.render = function () {\n      // parse out spreadsheet data passed to component\n      // Todo: should this happen elsewhere? if not, rename prop?\n      var data = JSON.parse(_this.props.text);\n      _this.testColumns = data[\"column_data\"];\n      _this.testRows = data[\"row_data\"];\n      // special display case for single column dataframe\n      var singleColumn = _this.testColumns.length === 1;\n      // we want to track whether any column contains text, as this affects formatting\n      var containsText = false;\n      return _react2.default.createElement(\n        'div',\n        { className: _this.props.origin === 'iris' ? 'message left' : 'message right', style: _this.props.hidden === true ? { display: 'none' } : {} },\n        _react2.default.createElement(\n          'div',\n          { className: 'bubble table' },\n          _react2.default.createElement(\n            'div',\n            { className: 'data_table', style: { width: _this.testColumns.length * (350 + 10 + 1) } },\n            _react2.default.createElement(\n              'div',\n              { className: 'header' },\n              _this.testColumns.map(function (column, i) {\n                // define style attributes for the column programmatically, based on data-type\n                var newColStyle = {};\n                if (column.type === \"Text\") {\n                  newColStyle['width'] = 350;\n                  containsText = true;\n                }\n                if (singleColumn || i == 0) {\n                  newColStyle['border-left'] = 'none';\n                };\n                // not going to display more than 50 columns\n                // TODO: make this nicer, at least refactor to a global constant\n                if (i < 50) {\n                  return _react2.default.createElement(\n                    'span',\n                    { className: 'data_column', style: newColStyle },\n                    column.name\n                  );\n                }\n              })\n            ),\n            _this.testRows.map(function (row, row_num) {\n              if (row_num < 50) {\n                var newRowStyle = {};\n                if (containsText) {\n                  newRowStyle['height'] = '4em';\n                };\n                // TODO: this is almost identical to the mapping above. refactor?\n                return _react2.default.createElement(\n                  'div',\n                  { className: 'data_row', style: newRowStyle },\n                  _this.testColumns.map(function (column, i) {\n                    var newColStyle = {};\n                    if (column.type === \"Text\") {\n                      newColStyle['width'] = 350;\n                    }\n                    if (containsText) {\n                      newColStyle['height'] = '4em';\n                    }\n                    if (singleColumn || i == 0) {\n                      newColStyle['border-left'] = 'none';\n                    };\n                    if (i < 50) {\n                      return _react2.default.createElement(\n                        'span',\n                        { className: 'data_column', style: newColStyle },\n                        row[column.name]\n                      );\n                    }\n                  })\n                );\n              }\n            })\n          )\n        )\n      );\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  return CollectionMessage;\n}(_react.Component);\n\nCollectionMessage.propTypes = proptypes.messageType;\n\nexports.default = CollectionMessage;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9Db2xsZWN0aW9uTWVzc2FnZS5qcz8wZDQ2Il0sIm5hbWVzIjpbInByb3B0eXBlcyIsIkNvbGxlY3Rpb25NZXNzYWdlIiwicmVuZGVyIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsInByb3BzIiwidGV4dCIsInRlc3RDb2x1bW5zIiwidGVzdFJvd3MiLCJzaW5nbGVDb2x1bW4iLCJsZW5ndGgiLCJjb250YWluc1RleHQiLCJvcmlnaW4iLCJoaWRkZW4iLCJkaXNwbGF5Iiwid2lkdGgiLCJtYXAiLCJjb2x1bW4iLCJpIiwibmV3Q29sU3R5bGUiLCJ0eXBlIiwibmFtZSIsInJvdyIsInJvd19udW0iLCJuZXdSb3dTdHlsZSIsInByb3BUeXBlcyIsIm1lc3NhZ2VUeXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7O0lBQVlBLFM7Ozs7Ozs7Ozs7OztBQUVaO0FBQ0E7SUFDTUMsaUI7Ozs7Ozs7Ozs7Ozs7OzRNQUVKQyxNLEdBQVMsWUFBTTtBQUNiO0FBQ0E7QUFDQSxVQUFNQyxPQUFPQyxLQUFLQyxLQUFMLENBQVcsTUFBS0MsS0FBTCxDQUFXQyxJQUF0QixDQUFiO0FBQ0EsWUFBS0MsV0FBTCxHQUFtQkwsS0FBSyxhQUFMLENBQW5CO0FBQ0EsWUFBS00sUUFBTCxHQUFnQk4sS0FBSyxVQUFMLENBQWhCO0FBQ0E7QUFDQSxVQUFJTyxlQUFlLE1BQUtGLFdBQUwsQ0FBaUJHLE1BQWpCLEtBQTRCLENBQS9DO0FBQ0E7QUFDQSxVQUFJQyxlQUFlLEtBQW5CO0FBQ0EsYUFBUTtBQUFBO0FBQUEsVUFBSyxXQUFhLE1BQUtOLEtBQUwsQ0FBV08sTUFBWCxLQUFzQixNQUF0QixHQUErQixjQUEvQixHQUFnRCxlQUFsRSxFQUFtRixPQUFPLE1BQUtQLEtBQUwsQ0FBV1EsTUFBWCxLQUFzQixJQUF0QixHQUE2QixFQUFDQyxTQUFTLE1BQVYsRUFBN0IsR0FBaUQsRUFBM0k7QUFDSjtBQUFBO0FBQUEsWUFBSyxXQUFVLGNBQWY7QUFDQTtBQUFBO0FBQUEsY0FBSyxXQUFVLFlBQWYsRUFBNEIsT0FBTyxFQUFDQyxPQUFPLE1BQUtSLFdBQUwsQ0FBaUJHLE1BQWpCLElBQTJCLE1BQUksRUFBSixHQUFPLENBQWxDLENBQVIsRUFBbkM7QUFDRTtBQUFBO0FBQUEsZ0JBQUssV0FBVSxRQUFmO0FBQ0Msb0JBQUtILFdBQUwsQ0FBaUJTLEdBQWpCLENBQXFCLFVBQUNDLE1BQUQsRUFBUUMsQ0FBUixFQUFjO0FBQ2xDO0FBQ0Esb0JBQUlDLGNBQWMsRUFBbEI7QUFDQSxvQkFBR0YsT0FBT0csSUFBUCxLQUFnQixNQUFuQixFQUEwQjtBQUN4QkQsOEJBQVksT0FBWixJQUF1QixHQUF2QjtBQUNBUixpQ0FBZSxJQUFmO0FBQ0Q7QUFDRCxvQkFBSUYsZ0JBQWdCUyxLQUFLLENBQXpCLEVBQTJCO0FBQUVDLDhCQUFZLGFBQVosSUFBNkIsTUFBN0I7QUFBcUM7QUFDbEU7QUFDQTtBQUNBLG9CQUFHRCxJQUFJLEVBQVAsRUFBVTtBQUNSLHlCQUFPO0FBQUE7QUFBQSxzQkFBTSxXQUFVLGFBQWhCLEVBQThCLE9BQU9DLFdBQXJDO0FBQW1ERiwyQkFBT0k7QUFBMUQsbUJBQVA7QUFDRDtBQUNGLGVBYkE7QUFERCxhQURGO0FBaUJHLGtCQUFLYixRQUFMLENBQWNRLEdBQWQsQ0FBa0IsVUFBQ00sR0FBRCxFQUFNQyxPQUFOLEVBQWtCO0FBQ25DLGtCQUFJQSxVQUFVLEVBQWQsRUFBaUI7QUFDZixvQkFBSUMsY0FBYyxFQUFsQjtBQUNBLG9CQUFJYixZQUFKLEVBQWlCO0FBQUVhLDhCQUFZLFFBQVosSUFBd0IsS0FBeEI7QUFBOEI7QUFDakQ7QUFDQSx1QkFBUTtBQUFBO0FBQUEsb0JBQUssV0FBVSxVQUFmLEVBQTBCLE9BQU9BLFdBQWpDO0FBQ0wsd0JBQUtqQixXQUFMLENBQWlCUyxHQUFqQixDQUFxQixVQUFDQyxNQUFELEVBQVNDLENBQVQsRUFBZTtBQUNuQyx3QkFBSUMsY0FBYyxFQUFsQjtBQUNBLHdCQUFHRixPQUFPRyxJQUFQLEtBQWdCLE1BQW5CLEVBQTBCO0FBQ3hCRCxrQ0FBWSxPQUFaLElBQXVCLEdBQXZCO0FBQ0Q7QUFDRCx3QkFBR1IsWUFBSCxFQUFnQjtBQUNkUSxrQ0FBWSxRQUFaLElBQXdCLEtBQXhCO0FBQ0Q7QUFDRCx3QkFBSVYsZ0JBQWdCUyxLQUFLLENBQXpCLEVBQTJCO0FBQUVDLGtDQUFZLGFBQVosSUFBNkIsTUFBN0I7QUFBcUM7QUFDbEUsd0JBQUdELElBQUksRUFBUCxFQUFVO0FBQ1IsNkJBQU87QUFBQTtBQUFBLDBCQUFNLFdBQVUsYUFBaEIsRUFBOEIsT0FBT0MsV0FBckM7QUFBbURHLDRCQUFJTCxPQUFPSSxJQUFYO0FBQW5ELHVCQUFQO0FBQ0Q7QUFDRixtQkFaQTtBQURLLGlCQUFSO0FBZUQ7QUFDRixhQXJCQTtBQWpCSDtBQURBO0FBREksT0FBUjtBQTRDRCxLOzs7Ozs7QUFJSHJCLGtCQUFrQnlCLFNBQWxCLEdBQThCMUIsVUFBVTJCLFdBQXhDOztrQkFFZTFCLGlCIiwiZmlsZSI6IjQ5MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdERhdGFHcmlkIGZyb20gJ3JlYWN0LWRhdGEtZ3JpZCc7XG5pbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIHByb3B0eXBlcyBmcm9tICcuLi9wcm9wdHlwZXMvdHlwZXMnO1xuXG4vLyBDbGFzcyB0byBkZWZpbmUgc3BlYWRzaGVldC1saWtlIGRhdGEgZm9yIElyaXNcbi8vIFRvZG86IHNvbWUgb2YgdGhlc2Ugc2hvdWxkIGJlIHJlZmFjdG9yZWQsIGFzIGl0IGlzIHJlcGVhdGVkIGluIFRhYmxlU2VsZWN0TWVzc2FnZVxuY2xhc3MgQ29sbGVjdGlvbk1lc3NhZ2UgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHJlbmRlciA9ICgpID0+IHtcbiAgICAvLyBwYXJzZSBvdXQgc3ByZWFkc2hlZXQgZGF0YSBwYXNzZWQgdG8gY29tcG9uZW50XG4gICAgLy8gVG9kbzogc2hvdWxkIHRoaXMgaGFwcGVuIGVsc2V3aGVyZT8gaWYgbm90LCByZW5hbWUgcHJvcD9cbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSh0aGlzLnByb3BzLnRleHQpO1xuICAgIHRoaXMudGVzdENvbHVtbnMgPSBkYXRhW1wiY29sdW1uX2RhdGFcIl07XG4gICAgdGhpcy50ZXN0Um93cyA9IGRhdGFbXCJyb3dfZGF0YVwiXTtcbiAgICAvLyBzcGVjaWFsIGRpc3BsYXkgY2FzZSBmb3Igc2luZ2xlIGNvbHVtbiBkYXRhZnJhbWVcbiAgICBsZXQgc2luZ2xlQ29sdW1uID0gdGhpcy50ZXN0Q29sdW1ucy5sZW5ndGggPT09IDE7XG4gICAgLy8gd2Ugd2FudCB0byB0cmFjayB3aGV0aGVyIGFueSBjb2x1bW4gY29udGFpbnMgdGV4dCwgYXMgdGhpcyBhZmZlY3RzIGZvcm1hdHRpbmdcbiAgICBsZXQgY29udGFpbnNUZXh0ID0gZmFsc2U7XG4gICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZSA9IHt0aGlzLnByb3BzLm9yaWdpbiA9PT0gJ2lyaXMnID8gJ21lc3NhZ2UgbGVmdCcgOiAnbWVzc2FnZSByaWdodCd9IHN0eWxlPXt0aGlzLnByb3BzLmhpZGRlbiA9PT0gdHJ1ZSA/IHtkaXNwbGF5OiAnbm9uZSd9IDoge319PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1YmJsZSB0YWJsZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRhdGFfdGFibGVcIiBzdHlsZT17e3dpZHRoOiB0aGlzLnRlc3RDb2x1bW5zLmxlbmd0aCAqICgzNTArMTArMSl9fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxuICAgICAgICAgIHt0aGlzLnRlc3RDb2x1bW5zLm1hcCgoY29sdW1uLGkpID0+IHtcbiAgICAgICAgICAgIC8vIGRlZmluZSBzdHlsZSBhdHRyaWJ1dGVzIGZvciB0aGUgY29sdW1uIHByb2dyYW1tYXRpY2FsbHksIGJhc2VkIG9uIGRhdGEtdHlwZVxuICAgICAgICAgICAgbGV0IG5ld0NvbFN0eWxlID0ge307XG4gICAgICAgICAgICBpZihjb2x1bW4udHlwZSA9PT0gXCJUZXh0XCIpe1xuICAgICAgICAgICAgICBuZXdDb2xTdHlsZVsnd2lkdGgnXSA9IDM1MDtcbiAgICAgICAgICAgICAgY29udGFpbnNUZXh0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaW5nbGVDb2x1bW4gfHwgaSA9PSAwKXsgbmV3Q29sU3R5bGVbJ2JvcmRlci1sZWZ0J10gPSAnbm9uZScgfTtcbiAgICAgICAgICAgIC8vIG5vdCBnb2luZyB0byBkaXNwbGF5IG1vcmUgdGhhbiA1MCBjb2x1bW5zXG4gICAgICAgICAgICAvLyBUT0RPOiBtYWtlIHRoaXMgbmljZXIsIGF0IGxlYXN0IHJlZmFjdG9yIHRvIGEgZ2xvYmFsIGNvbnN0YW50XG4gICAgICAgICAgICBpZihpIDwgNTApe1xuICAgICAgICAgICAgICByZXR1cm4gPHNwYW4gY2xhc3NOYW1lPVwiZGF0YV9jb2x1bW5cIiBzdHlsZT17bmV3Q29sU3R5bGV9Pntjb2x1bW4ubmFtZX08L3NwYW4+O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHt0aGlzLnRlc3RSb3dzLm1hcCgocm93LCByb3dfbnVtKSA9PiB7XG4gICAgICAgICAgICBpZiAocm93X251bSA8IDUwKXtcbiAgICAgICAgICAgICAgbGV0IG5ld1Jvd1N0eWxlID0ge307XG4gICAgICAgICAgICAgIGlmIChjb250YWluc1RleHQpeyBuZXdSb3dTdHlsZVsnaGVpZ2h0J10gPSAnNGVtJ307XG4gICAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYWxtb3N0IGlkZW50aWNhbCB0byB0aGUgbWFwcGluZyBhYm92ZS4gcmVmYWN0b3I/XG4gICAgICAgICAgICAgIHJldHVybiAoPGRpdiBjbGFzc05hbWU9XCJkYXRhX3Jvd1wiIHN0eWxlPXtuZXdSb3dTdHlsZX0+XG4gICAgICAgICAgICAgICAge3RoaXMudGVzdENvbHVtbnMubWFwKChjb2x1bW4sIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxldCBuZXdDb2xTdHlsZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgaWYoY29sdW1uLnR5cGUgPT09IFwiVGV4dFwiKXtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sU3R5bGVbJ3dpZHRoJ10gPSAzNTA7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZihjb250YWluc1RleHQpe1xuICAgICAgICAgICAgICAgICAgICBuZXdDb2xTdHlsZVsnaGVpZ2h0J10gPSAnNGVtJztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChzaW5nbGVDb2x1bW4gfHwgaSA9PSAwKXsgbmV3Q29sU3R5bGVbJ2JvcmRlci1sZWZ0J10gPSAnbm9uZScgfTtcbiAgICAgICAgICAgICAgICAgIGlmKGkgPCA1MCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8c3BhbiBjbGFzc05hbWU9XCJkYXRhX2NvbHVtblwiIHN0eWxlPXtuZXdDb2xTdHlsZX0+e3Jvd1tjb2x1bW4ubmFtZV19PC9zcGFuPjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC9kaXY+KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+KTtcbiAgfVxuXG59XG5cbkNvbGxlY3Rpb25NZXNzYWdlLnByb3BUeXBlcyA9IHByb3B0eXBlcy5tZXNzYWdlVHlwZTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sbGVjdGlvbk1lc3NhZ2U7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9Db2xsZWN0aW9uTWVzc2FnZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ })

})