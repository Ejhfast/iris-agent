webpackHotUpdate(0,{

/***/ 510:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _reactRouterRedux = __webpack_require__(433);\n\nvar _redux = __webpack_require__(296);\n\nvar _types = __webpack_require__(314);\n\nvar types = _interopRequireWildcard(_types);\n\nvar _lodash = __webpack_require__(140);\n\nvar _ = _interopRequireWildcard(_lodash);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// TODO: a bit confused why we need this function\nvar valueOrNull = function valueOrNull(value) {\n    if (value !== undefined) {\n        return value;\n    }\n    return null;\n};\n\n// given an action, push any new messages onto an existing set of messages\nvar appendMessages = function appendMessages(oldMessages, action) {\n    var newMessages = [];\n    var currentMax = 0;\n    if (oldMessages.length > 0) {\n        console.log('map', _.map(oldMessages, function (m) {\n            return m.id;\n        }));\n        currentMax = _.max(_.map(oldMessages, function (m) {\n            return m.id;\n        }));\n    }\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = action.text[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var m = _step.value;\n\n            currentMax++;\n            var class_index = action.class_index !== undefined ? action.class_index : null;\n            newMessages.push({ 'origin': action.origin, 'text': m, 'id': currentMax, 'class_index': class_index,\n                'state': valueOrNull(action.state), 'arg': valueOrNull(action.arg) });\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    return oldMessages.concat(newMessages);\n};\n\n// given an action, update a conversation with new messages\nvar appendMessagesConvo = function appendMessagesConvo(convo, action) {\n    var messages = convo.messages;\n\n    return _extends({}, convo, { messages: appendMessages(messages, action), args: action.arg_map });\n};\n\n// reducer for conversations\n// TODO: This definition state is pretty long, messy\n// Also not clear what \"args\" represents in a conversation with multiple sub-convos\n// Maybe it is only important to represent the convo title, if so maybe that should be refactored\nvar conversation = function conversation() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { 'history': [], 'currentConvo': { 'messages': [], 'title': null, 'hidden': false, 'id': 0, 'args': {} }, 'state': 'START' };\n    var action = arguments[1];\n    var history = state.history,\n        currentConvo = state.currentConvo;\n\n    var newConvo = void 0;\n    switch (action.type) {\n        case types.UPDATE_HISTORY:\n            console.log(action.conversation.currentConvo);\n            return { history: action.conversation.history, currentConvo: action.conversation.currentConvo, 'state': state.state };\n        case types.ADD_MESSAGE:\n            return { history: history, currentConvo: appendMessagesConvo(currentConvo, action), 'state': state.state };\n        // this is a bit complex, maybe needs review for clarity\n        case types.ADD_SERVER_MESSAGE:\n            if (action.text.length === 0) {\n                return state;\n            }\n            newConvo = appendMessagesConvo(currentConvo, action);\n            if (action.state === 'START') {\n                // hardcoding some logic here for syncing history with server on START\n                // this allows some commands to overwrite history immediately\n                var theId = action.history.length;\n                newConvo = _extends({}, newConvo, { title: action.label, id: theId });\n                return { history: action.history.concat([newConvo]), 'currentConvo': { 'messages': [], 'title': null, 'hidden': false, 'id': newConvo.id + 1, 'args': {} }, state: 'START' };\n            }\n            return { history: history, currentConvo: newConvo, state: action.state };\n        case types.HIDE_CONVERSATION:\n            // this is super verbose just to update a specific convo index, better way?\n            var newHistory = _.map(history, function (conv) {\n                var out = _extends({}, conv);\n                if (conv.id === action.id) {\n                    out.hidden = !out.hidden;\n                }\n                return out;\n            });\n            // TODO: also wasteful to do a copy everytime, indendent of the index?\n            newConvo = _extends({}, currentConvo);\n            if (newConvo.id === action.id) {\n                newConvo.hidden = !newConvo.hidden;\n            }\n            return { history: newHistory, currentConvo: newConvo, state: state.state };\n        default:\n            return state;\n    }\n};\n\n// variables reducer, constrols variables in right sidebar\nvar variables = function variables() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.UPDATE_VARIABLES:\n            return action.variables;\n        default:\n            return state;\n    }\n};\n\n// predictions reducer, governs hints above input box\nvar predictions = function predictions() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.UPDATE_PREDICTIONS:\n            return action.predictions;\n        default:\n            return state;\n    }\n};\n\n// docs reducer, governs what is displayed in docs pane\nvar docs = function docs() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { title: '', examples: [], description: [], source: '' };\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.UPDATE_DOCS:\n            return action.doc;\n        default:\n            return state;\n    }\n};\n\n// function search reducer, governs function search in the right sidebar\nvar functionSearch = function functionSearch() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { search: '', results: [] };\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.UPDATE_FUNC:\n            return _extends({}, state, { search: action.search });\n        case types.UPDATE_RESULTS:\n            return _extends({}, state, { results: action.results });\n        default:\n            return state;\n    }\n};\n\n// input reducer, manages current user input on main conversation pane\nvar currentInput = function currentInput() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { 'input': '' };\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.STORE_CURRENT_INPUT:\n            return { 'input': action.currentInput };\n        default:\n            return state;\n    }\n};\n\n// reducer that manages which pans are open and closed\n// TODO: this is a bad API, make more consistent\nvar minimizeState = function minimizeState() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { 'docs': true, 'code_edit': true };\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.SET_DOCS:\n            return _extends({}, state, { 'docs': action.docs });\n        case types.SET_CODE_EDIT:\n            return _extends({}, state, { 'code_edit': action.code_edit });\n        default:\n            return state;\n    }\n};\n\n// helper to create a new array/list with desired index removed\nvar removeIndex = function removeIndex(arr, i) {\n    var first_half = arr.concat([]).slice(0, i);\n    var second_half = arr.concat([]).slice(i + 1, arr.length);\n    return first_half.concat(second_half);\n};\n\nvar blankCommand = { name: '', title: '', args: [], examples: [], command: '', explanation: '', testInput: '', preview: '', error: '' };\n\n// reducer to manage the command editing pane\nvar commandEditPane = function commandEditPane() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _extends({}, blankCommand);\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.UPDATE_CODE_EDITOR:\n            var new_state = {};\n            new_state[action.name] = action.value;\n            return _extends({}, state, new_state);\n        case types.UPDATE_COMMAND:\n            console.log(_extends({}, state, action.command));\n            return _extends({}, state, action.command);\n        case types.ADD_COMMAND_ARG:\n            return _extends({}, state, { args: state.args.concat([{ 'arg_name': '', 'arg_type': '', 'arg_string': '' }]) });\n        case types.RESET_COMMAND:\n            return _extends({}, state, blankCommand);\n        case types.ADD_COMMAND_EXAMPLE:\n            return _extends({}, state, { examples: state.examples.concat(['']) });\n        case types.UPDATE_COMMAND_EXAMPLE:\n            var newExamples = state.examples.concat([]);\n            newExamples[action.id] = action.text;\n            return _extends({}, state, { examples: newExamples });\n        case types.UPDATE_COMMAND_ARG:\n            var newArgs = state.args.concat([]);\n            newArgs[action.id] = action.values;\n            return _extends({}, state, { args: newArgs });\n        case types.DELETE_COMMAND_ARG:\n            return _extends({}, state, { args: removeIndex(state.args, action.id) });\n        case types.DELETE_COMMAND_EXAMPLE:\n            return _extends({}, state, { examples: removeIndex(state.examples, action.id) });\n        default:\n            return state;\n    }\n};\n\n// reducer to manage the input history state, going through old commands with up/down arrow\nvar inputHistory = function inputHistory() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { 'history': [], 'currId': null, 'showHistory': false };\n    var action = arguments[1];\n\n    var newId = void 0;\n    switch (action.type) {\n        case types.ADD_INPUT_HISTORY:\n            var newHistory = [].concat(_toConsumableArray(state.history), [action.message]);\n            console.log(\"history\", newHistory, state.currId, newHistory.length - 1);\n            return _extends({}, state, { 'history': newHistory, 'currId': newHistory.length - 1 });\n        case types.MOVE_INPUT_HISTORY:\n            if (state.history.length === 0 || state.currId === null) {\n                console.log(\"history\", state.currId, newId);\n                return state;\n            }\n            newId = state.currId;\n            if (action.direction === 'up') {\n                if (newId >= 1) {\n                    newId -= 1;\n                }\n            } else {\n                if (newId < state.history.length - 1) {\n                    newId += 1;\n                }\n            }\n            console.log(\"history\", state.currId, newId);\n            return _extends({}, state, { 'currId': newId });\n        default:\n            return state;\n    }\n};\n\n// combine all these reducers together\nvar rootReducer = (0, _redux.combineReducers)({\n    conversation: conversation,\n    variables: variables,\n    predictions: predictions,\n    inputHistory: inputHistory,\n    currentInput: currentInput,\n    docs: docs,\n    functionSearch: functionSearch,\n    minimizeState: minimizeState,\n    commandEditPane: commandEditPane,\n    routing: _reactRouterRedux.routerReducer\n});\n\nexports.default = rootReducer;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvcmVkdWNlcnMvaW5kZXguanM/ZTkxNiJdLCJuYW1lcyI6WyJ0eXBlcyIsIl8iLCJ2YWx1ZU9yTnVsbCIsInZhbHVlIiwidW5kZWZpbmVkIiwiYXBwZW5kTWVzc2FnZXMiLCJvbGRNZXNzYWdlcyIsImFjdGlvbiIsIm5ld01lc3NhZ2VzIiwiY3VycmVudE1heCIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJtYXAiLCJtIiwiaWQiLCJtYXgiLCJ0ZXh0IiwiY2xhc3NfaW5kZXgiLCJwdXNoIiwib3JpZ2luIiwic3RhdGUiLCJhcmciLCJjb25jYXQiLCJhcHBlbmRNZXNzYWdlc0NvbnZvIiwiY29udm8iLCJtZXNzYWdlcyIsImFyZ3MiLCJhcmdfbWFwIiwiY29udmVyc2F0aW9uIiwiaGlzdG9yeSIsImN1cnJlbnRDb252byIsIm5ld0NvbnZvIiwidHlwZSIsIlVQREFURV9ISVNUT1JZIiwiQUREX01FU1NBR0UiLCJBRERfU0VSVkVSX01FU1NBR0UiLCJ0aGVJZCIsInRpdGxlIiwibGFiZWwiLCJISURFX0NPTlZFUlNBVElPTiIsIm5ld0hpc3RvcnkiLCJvdXQiLCJjb252IiwiaGlkZGVuIiwidmFyaWFibGVzIiwiVVBEQVRFX1ZBUklBQkxFUyIsInByZWRpY3Rpb25zIiwiVVBEQVRFX1BSRURJQ1RJT05TIiwiZG9jcyIsImV4YW1wbGVzIiwiZGVzY3JpcHRpb24iLCJzb3VyY2UiLCJVUERBVEVfRE9DUyIsImRvYyIsImZ1bmN0aW9uU2VhcmNoIiwic2VhcmNoIiwicmVzdWx0cyIsIlVQREFURV9GVU5DIiwiVVBEQVRFX1JFU1VMVFMiLCJjdXJyZW50SW5wdXQiLCJTVE9SRV9DVVJSRU5UX0lOUFVUIiwibWluaW1pemVTdGF0ZSIsIlNFVF9ET0NTIiwiU0VUX0NPREVfRURJVCIsImNvZGVfZWRpdCIsInJlbW92ZUluZGV4IiwiYXJyIiwiaSIsImZpcnN0X2hhbGYiLCJzbGljZSIsInNlY29uZF9oYWxmIiwiYmxhbmtDb21tYW5kIiwibmFtZSIsImNvbW1hbmQiLCJleHBsYW5hdGlvbiIsInRlc3RJbnB1dCIsInByZXZpZXciLCJlcnJvciIsImNvbW1hbmRFZGl0UGFuZSIsIlVQREFURV9DT0RFX0VESVRPUiIsIm5ld19zdGF0ZSIsIlVQREFURV9DT01NQU5EIiwiQUREX0NPTU1BTkRfQVJHIiwiUkVTRVRfQ09NTUFORCIsIkFERF9DT01NQU5EX0VYQU1QTEUiLCJVUERBVEVfQ09NTUFORF9FWEFNUExFIiwibmV3RXhhbXBsZXMiLCJVUERBVEVfQ09NTUFORF9BUkciLCJuZXdBcmdzIiwidmFsdWVzIiwiREVMRVRFX0NPTU1BTkRfQVJHIiwiREVMRVRFX0NPTU1BTkRfRVhBTVBMRSIsImlucHV0SGlzdG9yeSIsIm5ld0lkIiwiQUREX0lOUFVUX0hJU1RPUlkiLCJtZXNzYWdlIiwiY3VycklkIiwiTU9WRV9JTlBVVF9ISVNUT1JZIiwiZGlyZWN0aW9uIiwicm9vdFJlZHVjZXIiLCJyb3V0aW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztJQUFZQSxLOztBQUNaOztJQUFZQyxDOzs7Ozs7QUFFWjtBQUNBLElBQU1DLGNBQWMsU0FBZEEsV0FBYyxDQUFDQyxLQUFELEVBQVc7QUFDM0IsUUFBSUEsVUFBVUMsU0FBZCxFQUF5QjtBQUNyQixlQUFPRCxLQUFQO0FBQ0g7QUFDRCxXQUFPLElBQVA7QUFDSCxDQUxEOztBQU9BO0FBQ0EsSUFBTUUsaUJBQWlCLFNBQWpCQSxjQUFpQixDQUFDQyxXQUFELEVBQWNDLE1BQWQsRUFBeUI7QUFDNUMsUUFBTUMsY0FBYyxFQUFwQjtBQUNBLFFBQUlDLGFBQWEsQ0FBakI7QUFDQSxRQUFJSCxZQUFZSSxNQUFaLEdBQXFCLENBQXpCLEVBQTRCO0FBQ3hCQyxnQkFBUUMsR0FBUixDQUFZLEtBQVosRUFBbUJYLEVBQUVZLEdBQUYsQ0FBTVAsV0FBTixFQUFtQixVQUFTUSxDQUFULEVBQVk7QUFBRSxtQkFBT0EsRUFBRUMsRUFBVDtBQUFjLFNBQS9DLENBQW5CO0FBQ0FOLHFC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Q0osYUFBS1YsTUFBTWtHLGtCQUFYO0FBQ0ksZ0JBQUk3RSxNQUFNUyxPQUFOLENBQWNwQixNQUFkLEtBQXlCLENBQXpCLElBQThCVyxNQUFNNEUsTUFBTixLQUFpQixJQUFuRCxFQUF5RDtBQUNyRHRGLHdCQUFRQyxHQUFSLENBQVksU0FBWixFQUF1QlMsTUFBTTRFLE1BQTdCLEVBQXFDSCxLQUFyQztBQUNBLHVCQUFPekUsS0FBUDtBQUNIO0FBQ0R5RSxvQkFBUXpFLE1BQU00RSxNQUFkO0FBQ0EsZ0JBQUkxRixPQUFPNEYsU0FBUCxLQUFxQixJQUF6QixFQUErQjtBQUMzQixvQkFBSUwsU0FBUyxDQUFiLEVBQWdCO0FBQ1pBLDZCQUFTLENBQVQ7QUFDSDtBQUNKLGFBSkQsTUFJTztBQUNILG9CQUFJQSxRQUFTekUsTUFBTVMsT0FBTixDQUFjcEIsTUFBZCxHQUF1QixDQUFwQyxFQUF3QztBQUNwQ29GLDZCQUFTLENBQVQ7QUFDSDtBQUNKO0FBQ0RuRixvQkFBUUMsR0FBUixDQUFZLFNBQVosRUFBdUJTLE1BQU00RSxNQUE3QixFQUFxQ0gsS0FBckM7QUFDQSxnQ0FBV3pFLEtBQVgsSUFBa0IsVUFBVXlFLEtBQTVCO0FBQ0o7QUFDSSxtQkFBT3pFLEtBQVA7QUF2QlI7QUF5QkgsQ0EzQkQ7O0FBNkJBO0FBQ0EsSUFBTStFLGNBQWMsNEJBQWdCO0FBQ2hDdkUsOEJBRGdDO0FBRWhDZ0Isd0JBRmdDO0FBR2hDRSw0QkFIZ0M7QUFJaEM4Qyw4QkFKZ0M7QUFLaENqQyw4QkFMZ0M7QUFNaENYLGNBTmdDO0FBT2hDTSxrQ0FQZ0M7QUFRaENPLGdDQVJnQztBQVNoQ2lCLG9DQVRnQztBQVVoQ3NCO0FBVmdDLENBQWhCLENBQXBCOztrQkFhZUQsVyIsImZpbGUiOiI1MTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByb3V0ZXJSZWR1Y2VyIGFzIHJvdXRpbmcgfSBmcm9tICdyZWFjdC1yb3V0ZXItcmVkdXgnO1xuaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vYWN0aW9ucy90eXBlcyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5cbi8vIFRPRE86IGEgYml0IGNvbmZ1c2VkIHdoeSB3ZSBuZWVkIHRoaXMgZnVuY3Rpb25cbmNvbnN0IHZhbHVlT3JOdWxsID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cbi8vIGdpdmVuIGFuIGFjdGlvbiwgcHVzaCBhbnkgbmV3IG1lc3NhZ2VzIG9udG8gYW4gZXhpc3Rpbmcgc2V0IG9mIG1lc3NhZ2VzXG5jb25zdCBhcHBlbmRNZXNzYWdlcyA9IChvbGRNZXNzYWdlcywgYWN0aW9uKSA9PiB7XG4gICAgY29uc3QgbmV3TWVzc2FnZXMgPSBbXTtcbiAgICBsZXQgY3VycmVudE1heCA9IDA7XG4gICAgaWYgKG9sZE1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coJ21hcCcsIF8ubWFwKG9sZE1lc3NhZ2VzLCBmdW5jdGlvbihtKSB7IHJldHVybiBtLmlkOyB9KSk7XG4gICAgICAgIGN1cnJlbnRNYXggPSBfLm1heChfLm1hcChvbGRNZXNzYWdlcywgZnVuY3Rpb24obSkgeyByZXR1cm4gbS5pZDsgfSkpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG0gb2YgYWN0aW9uLnRleHQpIHtcbiAgICAgICAgY3VycmVudE1heCsrO1xuICAgICAgICBsZXQgY2xhc3NfaW5kZXggPSBhY3Rpb24uY2xhc3NfaW5kZXggIT09IHVuZGVmaW5lZCA/IGFjdGlvbi5jbGFzc19pbmRleCA6IG51bGw7XG4gICAgICAgIG5ld01lc3NhZ2VzLnB1c2goeydvcmlnaW4nOiBhY3Rpb24ub3JpZ2luLCAndGV4dCc6IG0sICdpZCc6IGN1cnJlbnRNYXgsICdjbGFzc19pbmRleCc6IGNsYXNzX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RhdGUnOiB2YWx1ZU9yTnVsbChhY3Rpb24uc3RhdGUpLCAnYXJnJzogdmFsdWVPck51bGwoYWN0aW9uLmFyZyl9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9sZE1lc3NhZ2VzLmNvbmNhdChuZXdNZXNzYWdlcyk7XG59O1xuXG4vLyBnaXZlbiBhbiBhY3Rpb24sIHVwZGF0ZSBhIGNvbnZlcnNhdGlvbiB3aXRoIG5ldyBtZXNzYWdlc1xuY29uc3QgYXBwZW5kTWVzc2FnZXNDb252byA9IChjb252bywgYWN0aW9uKSA9PiB7XG4gICAgY29uc3QgeyBtZXNzYWdlcyB9ID0gY29udm87XG4gICAgcmV0dXJuIHsgLi4uY29udm8sIG1lc3NhZ2VzOiBhcHBlbmRNZXNzYWdlcyhtZXNzYWdlcywgYWN0aW9uKSwgYXJnczogYWN0aW9uLmFyZ19tYXAgfTtcbn07XG5cbi8vIHJlZHVjZXIgZm9yIGNvbnZlcnNhdGlvbnNcbi8vIFRPRE86IFRoaXMgZGVmaW5pdGlvbiBzdGF0ZSBpcyBwcmV0dHkgbG9uZywgbWVzc3lcbi8vIEFsc28gbm90IGNsZWFyIHdoYXQgXCJhcmdzXCIgcmVwcmVzZW50cyBpbiBhIGNvbnZlcnNhdGlvbiB3aXRoIG11bHRpcGxlIHN1Yi1jb252b3Ncbi8vIE1heWJlIGl0IGlzIG9ubHkgaW1wb3J0YW50IHRvIHJlcHJlc2VudCB0aGUgY29udm8gdGl0bGUsIGlmIHNvIG1heWJlIHRoYXQgc2hvdWxkIGJlIHJlZmFjdG9yZWRcbmNvbnN0IGNvbnZlcnNhdGlvbiA9IChzdGF0ZSA9IHsnaGlzdG9yeSc6IFtdLCAnY3VycmVudENvbnZvJzogeyAnbWVzc2FnZXMnOiBbXSwgJ3RpdGxlJzogbnVsbCwgJ2hpZGRlbic6IGZhbHNlLCAnaWQnOiAwLCAnYXJncyc6IHt9IH0sICdzdGF0ZSc6ICdTVEFSVCd9LCBhY3Rpb24pID0+IHtcbiAgICBjb25zdCB7IGhpc3RvcnksIGN1cnJlbnRDb252byB9ID0gc3RhdGU7XG4gICAgbGV0IG5ld0NvbnZvO1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlcy5VUERBVEVfSElTVE9SWTpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFjdGlvbi5jb252ZXJzYXRpb24uY3VycmVudENvbnZvKTtcbiAgICAgICAgICAgIHJldHVybiB7IGhpc3Rvcnk6IGFjdGlvbi5jb252ZXJzYXRpb24uaGlzdG9yeSwgY3VycmVudENvbnZvOiBhY3Rpb24uY29udmVyc2F0aW9uLmN1cnJlbnRDb252bywgJ3N0YXRlJzogc3RhdGUuc3RhdGUgfTtcbiAgICAgICAgY2FzZSB0eXBlcy5BRERfTUVTU0FHRTpcbiAgICAgICAgICAgIHJldHVybiB7IGhpc3RvcnksIGN1cnJlbnRDb252bzogYXBwZW5kTWVzc2FnZXNDb252byhjdXJyZW50Q29udm8sIGFjdGlvbiksICdzdGF0ZSc6IHN0YXRlLnN0YXRlIH07XG4gICAgICAgIC8vIHRoaXMgaXMgYSBiaXQgY29tcGxleCwgbWF5YmUgbmVlZHMgcmV2aWV3IGZvciBjbGFyaXR5XG4gICAgICAgIGNhc2UgdHlwZXMuQUREX1NFUlZFUl9NRVNTQUdFOlxuICAgICAgICAgICAgaWYgKGFjdGlvbi50ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0NvbnZvID0gYXBwZW5kTWVzc2FnZXNDb252byhjdXJyZW50Q29udm8sIGFjdGlvbik7XG4gICAgICAgICAgICBpZiAoYWN0aW9uLnN0YXRlID09PSAnU1RBUlQnKSB7XG4gICAgICAgICAgICAgICAgLy8gaGFyZGNvZGluZyBzb21lIGxvZ2ljIGhlcmUgZm9yIHN5bmNpbmcgaGlzdG9yeSB3aXRoIHNlcnZlciBvbiBTVEFSVFxuICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIHNvbWUgY29tbWFuZHMgdG8gb3ZlcndyaXRlIGhpc3RvcnkgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICBsZXQgdGhlSWQgPSBhY3Rpb24uaGlzdG9yeS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgbmV3Q29udm8gPSB7Li4ubmV3Q29udm8sIHRpdGxlOiBhY3Rpb24ubGFiZWwsIGlkOiB0aGVJZCB9O1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGhpc3Rvcnk6IGFjdGlvbi5oaXN0b3J5LmNvbmNhdChbbmV3Q29udm9dKSwgJ2N1cnJlbnRDb252byc6IHsgJ21lc3NhZ2VzJzogW10sICd0aXRsZSc6IG51bGwsICdoaWRkZW4nOiBmYWxzZSwgJ2lkJzogbmV3Q29udm8uaWQgKyAxLCAnYXJncyc6IHt9IH0sIHN0YXRlOiAnU1RBUlQnIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBoaXN0b3J5LCBjdXJyZW50Q29udm86IG5ld0NvbnZvLCBzdGF0ZTogYWN0aW9uLnN0YXRlIH07XG4gICAgICAgIGNhc2UgdHlwZXMuSElERV9DT05WRVJTQVRJT046XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHN1cGVyIHZlcmJvc2UganVzdCB0byB1cGRhdGUgYSBzcGVjaWZpYyBjb252byBpbmRleCwgYmV0dGVyIHdheT9cbiAgICAgICAgICAgIGNvbnN0IG5ld0hpc3RvcnkgPSBfLm1hcChoaXN0b3J5LCBjb252ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXQgPSB7Li4uY29udn07XG4gICAgICAgICAgICAgICAgaWYgKGNvbnYuaWQgPT09IGFjdGlvbi5pZCkge1xuICAgICAgICAgICAgICAgICAgICBvdXQuaGlkZGVuID0gIW91dC5oaWRkZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFRPRE86IGFsc28gd2FzdGVmdWwgdG8gZG8gYSBjb3B5IGV2ZXJ5dGltZSwgaW5kZW5kZW50IG9mIHRoZSBpbmRleD9cbiAgICAgICAgICAgIG5ld0NvbnZvID0gey4uLmN1cnJlbnRDb252b307XG4gICAgICAgICAgICBpZiAobmV3Q29udm8uaWQgPT09IGFjdGlvbi5pZCkge1xuICAgICAgICAgICAgICAgIG5ld0NvbnZvLmhpZGRlbiA9ICFuZXdDb252by5oaWRkZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBoaXN0b3J5OiBuZXdIaXN0b3J5LCBjdXJyZW50Q29udm86IG5ld0NvbnZvLCBzdGF0ZTogc3RhdGUuc3RhdGV9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbi8vIHZhcmlhYmxlcyByZWR1Y2VyLCBjb25zdHJvbHMgdmFyaWFibGVzIGluIHJpZ2h0IHNpZGViYXJcbmNvbnN0IHZhcmlhYmxlcyA9IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXMuVVBEQVRFX1ZBUklBQkxFUzpcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24udmFyaWFibGVzO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbi8vIHByZWRpY3Rpb25zIHJlZHVjZXIsIGdvdmVybnMgaGludHMgYWJvdmUgaW5wdXQgYm94XG5jb25zdCBwcmVkaWN0aW9ucyA9IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXMuVVBEQVRFX1BSRURJQ1RJT05TOlxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbi5wcmVkaWN0aW9ucztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59O1xuXG4vLyBkb2NzIHJlZHVjZXIsIGdvdmVybnMgd2hhdCBpcyBkaXNwbGF5ZWQgaW4gZG9jcyBwYW5lXG5jb25zdCBkb2NzID0gKHN0YXRlID0ge3RpdGxlOiAnJywgZXhhbXBsZXM6IFtdLCBkZXNjcmlwdGlvbjogW10sIHNvdXJjZTonJ30sIGFjdGlvbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlcy5VUERBVEVfRE9DUzpcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24uZG9jO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbi8vIGZ1bmN0aW9uIHNlYXJjaCByZWR1Y2VyLCBnb3Zlcm5zIGZ1bmN0aW9uIHNlYXJjaCBpbiB0aGUgcmlnaHQgc2lkZWJhclxuY29uc3QgZnVuY3Rpb25TZWFyY2ggPSAoc3RhdGUgPSB7c2VhcmNoOiAnJywgcmVzdWx0czogW119LCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSl7XG4gICAgY2FzZSB0eXBlcy5VUERBVEVfRlVOQzpcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsIHNlYXJjaDogYWN0aW9uLnNlYXJjaH07XG4gICAgY2FzZSB0eXBlcy5VUERBVEVfUkVTVUxUUzpcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsIHJlc3VsdHM6IGFjdGlvbi5yZXN1bHRzfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG4vLyBpbnB1dCByZWR1Y2VyLCBtYW5hZ2VzIGN1cnJlbnQgdXNlciBpbnB1dCBvbiBtYWluIGNvbnZlcnNhdGlvbiBwYW5lXG5jb25zdCBjdXJyZW50SW5wdXQgPSAoc3RhdGUgPSB7J2lucHV0JzogJyd9LCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSl7XG4gICAgY2FzZSB0eXBlcy5TVE9SRV9DVVJSRU5UX0lOUFVUOlxuICAgICAgcmV0dXJuIHsnaW5wdXQnOiBhY3Rpb24uY3VycmVudElucHV0fTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG4vLyByZWR1Y2VyIHRoYXQgbWFuYWdlcyB3aGljaCBwYW5zIGFyZSBvcGVuIGFuZCBjbG9zZWRcbi8vIFRPRE86IHRoaXMgaXMgYSBiYWQgQVBJLCBtYWtlIG1vcmUgY29uc2lzdGVudFxuY29uc3QgbWluaW1pemVTdGF0ZSA9IChzdGF0ZT17J2RvY3MnOiB0cnVlLCAnY29kZV9lZGl0Jzp0cnVlfSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpe1xuICAgIGNhc2UgdHlwZXMuU0VUX0RPQ1M6XG4gICAgICByZXR1cm4gey4uLnN0YXRlLCAnZG9jcyc6IGFjdGlvbi5kb2NzfTtcbiAgICBjYXNlIHR5cGVzLlNFVF9DT0RFX0VESVQ6XG4gICAgICByZXR1cm4gey4uLnN0YXRlLCAnY29kZV9lZGl0JzogYWN0aW9uLmNvZGVfZWRpdH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuLy8gaGVscGVyIHRvIGNyZWF0ZSBhIG5ldyBhcnJheS9saXN0IHdpdGggZGVzaXJlZCBpbmRleCByZW1vdmVkXG5jb25zdCByZW1vdmVJbmRleCA9IChhcnIsIGkpID0+IHtcbiAgbGV0IGZpcnN0X2hhbGYgPSBhcnIuY29uY2F0KFtdKS5zbGljZSgwLCBpKTtcbiAgbGV0IHNlY29uZF9oYWxmID0gYXJyLmNvbmNhdChbXSkuc2xpY2UoaSsxLGFyci5sZW5ndGgpO1xuICByZXR1cm4gZmlyc3RfaGFsZi5jb25jYXQoc2Vjb25kX2hhbGYpO1xufVxuXG5jb25zdCBibGFua0NvbW1hbmQgPSB7bmFtZTogJycsIHRpdGxlOiAnJywgYXJnczogW10sIGV4YW1wbGVzOiBbXSwgY29tbWFuZDogJycsIGV4cGxhbmF0aW9uOiAnJywgdGVzdElucHV0OiAnJywgcHJldmlldzonJywgZXJyb3I6ICcnfTtcblxuLy8gcmVkdWNlciB0byBtYW5hZ2UgdGhlIGNvbW1hbmQgZWRpdGluZyBwYW5lXG5jb25zdCBjb21tYW5kRWRpdFBhbmUgPSAoc3RhdGU9ey4uLmJsYW5rQ29tbWFuZH0sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKXtcbiAgICBjYXNlIHR5cGVzLlVQREFURV9DT0RFX0VESVRPUjpcbiAgICAgIGxldCBuZXdfc3RhdGUgPSB7fTtcbiAgICAgIG5ld19zdGF0ZVthY3Rpb24ubmFtZV0gPSBhY3Rpb24udmFsdWU7XG4gICAgICByZXR1cm4gey4uLnN0YXRlLCAuLi5uZXdfc3RhdGV9O1xuICAgIGNhc2UgdHlwZXMuVVBEQVRFX0NPTU1BTkQ6XG4gICAgICBjb25zb2xlLmxvZyh7Li4uc3RhdGUsIC4uLmFjdGlvbi5jb21tYW5kfSk7XG4gICAgICByZXR1cm4gey4uLnN0YXRlLCAuLi5hY3Rpb24uY29tbWFuZH07XG4gICAgY2FzZSB0eXBlcy5BRERfQ09NTUFORF9BUkc6XG4gICAgICByZXR1cm4gey4uLnN0YXRlLCBhcmdzOiBzdGF0ZS5hcmdzLmNvbmNhdChbeydhcmdfbmFtZSc6ICcnLCAnYXJnX3R5cGUnOiAnJywgJ2FyZ19zdHJpbmcnOiAnJ31dKX07XG4gICAgY2FzZSB0eXBlcy5SRVNFVF9DT01NQU5EOlxuICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgLi4uYmxhbmtDb21tYW5kfTtcbiAgICBjYXNlIHR5cGVzLkFERF9DT01NQU5EX0VYQU1QTEU6XG4gICAgICByZXR1cm4gey4uLnN0YXRlLCBleGFtcGxlczogc3RhdGUuZXhhbXBsZXMuY29uY2F0KFsnJ10pfTtcbiAgICBjYXNlIHR5cGVzLlVQREFURV9DT01NQU5EX0VYQU1QTEU6XG4gICAgICBsZXQgbmV3RXhhbXBsZXMgPSBzdGF0ZS5leGFtcGxlcy5jb25jYXQoW10pO1xuICAgICAgbmV3RXhhbXBsZXNbYWN0aW9uLmlkXSA9IGFjdGlvbi50ZXh0O1xuICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgZXhhbXBsZXM6IG5ld0V4YW1wbGVzfTtcbiAgICBjYXNlIHR5cGVzLlVQREFURV9DT01NQU5EX0FSRzpcbiAgICAgIGxldCBuZXdBcmdzID0gc3RhdGUuYXJncy5jb25jYXQoW10pO1xuICAgICAgbmV3QXJnc1thY3Rpb24uaWRdID0gYWN0aW9uLnZhbHVlcztcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsIGFyZ3M6IG5ld0FyZ3N9O1xuICAgIGNhc2UgdHlwZXMuREVMRVRFX0NPTU1BTkRfQVJHOlxuICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgYXJnczogcmVtb3ZlSW5kZXgoc3RhdGUuYXJncywgYWN0aW9uLmlkKX07XG4gICAgY2FzZSB0eXBlcy5ERUxFVEVfQ09NTUFORF9FWEFNUExFOlxuICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgZXhhbXBsZXM6IHJlbW92ZUluZGV4KHN0YXRlLmV4YW1wbGVzLCBhY3Rpb24uaWQpfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG4vLyByZWR1Y2VyIHRvIG1hbmFnZSB0aGUgaW5wdXQgaGlzdG9yeSBzdGF0ZSwgZ29pbmcgdGhyb3VnaCBvbGQgY29tbWFuZHMgd2l0aCB1cC9kb3duIGFycm93XG5jb25zdCBpbnB1dEhpc3RvcnkgPSAoc3RhdGUgPSB7J2hpc3RvcnknOiBbXSwgJ2N1cnJJZCc6IG51bGwsICdzaG93SGlzdG9yeSc6IGZhbHNlIH0sIGFjdGlvbikgPT4ge1xuICAgIGxldCBuZXdJZDtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXMuQUREX0lOUFVUX0hJU1RPUlk6XG4gICAgICAgICAgICBjb25zdCBuZXdIaXN0b3J5ID0gWy4uLnN0YXRlLmhpc3RvcnksIGFjdGlvbi5tZXNzYWdlXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGlzdG9yeVwiLCBuZXdIaXN0b3J5LCBzdGF0ZS5jdXJySWQsIG5ld0hpc3RvcnkubGVuZ3RoLTEpO1xuICAgICAgICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgJ2hpc3RvcnknOiBuZXdIaXN0b3J5LCAnY3VycklkJzogbmV3SGlzdG9yeS5sZW5ndGgtMX07XG4gICAgICAgIGNhc2UgdHlwZXMuTU9WRV9JTlBVVF9ISVNUT1JZOlxuICAgICAgICAgICAgaWYgKHN0YXRlLmhpc3RvcnkubGVuZ3RoID09PSAwIHx8IHN0YXRlLmN1cnJJZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGlzdG9yeVwiLCBzdGF0ZS5jdXJySWQsIG5ld0lkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdJZCA9IHN0YXRlLmN1cnJJZDtcbiAgICAgICAgICAgIGlmIChhY3Rpb24uZGlyZWN0aW9uID09PSAndXAnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0lkID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3SWQgLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChuZXdJZCA8IChzdGF0ZS5oaXN0b3J5Lmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0lkICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJoaXN0b3J5XCIsIHN0YXRlLmN1cnJJZCwgbmV3SWQpO1xuICAgICAgICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgJ2N1cnJJZCc6IG5ld0lkIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcblxuLy8gY29tYmluZSBhbGwgdGhlc2UgcmVkdWNlcnMgdG9nZXRoZXJcbmNvbnN0IHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcbiAgICBjb252ZXJzYXRpb24sXG4gICAgdmFyaWFibGVzLFxuICAgIHByZWRpY3Rpb25zLFxuICAgIGlucHV0SGlzdG9yeSxcbiAgICBjdXJyZW50SW5wdXQsXG4gICAgZG9jcyxcbiAgICBmdW5jdGlvblNlYXJjaCxcbiAgICBtaW5pbWl6ZVN0YXRlLFxuICAgIGNvbW1hbmRFZGl0UGFuZSxcbiAgICByb3V0aW5nXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdFJlZHVjZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvcmVkdWNlcnMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ })

})