webpackHotUpdate(0,{

/***/ 492:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _reactDataGrid = __webpack_require__(402);\n\nvar _reactDataGrid2 = _interopRequireDefault(_reactDataGrid);\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _types = __webpack_require__(62);\n\nvar proptypes = _interopRequireWildcard(_types);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Class to define speadsheet-like data for Iris\n// Todo: some of these should be refactored, as it is repeated in TableSelectMessage\nvar CollectionMessage = function (_Component) {\n  _inherits(CollectionMessage, _Component);\n\n  function CollectionMessage() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, CollectionMessage);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CollectionMessage.__proto__ || Object.getPrototypeOf(CollectionMessage)).call.apply(_ref, [this].concat(args))), _this), _this.render = function () {\n      // parse out spreadsheet data passed to component\n      // Todo: should this happen elsewhere? if not, rename prop?\n      var data = JSON.parse(_this.props.text);\n      _this.testColumns = data[\"column_data\"];\n      _this.testRows = data[\"row_data\"];\n      // special display case for single column dataframe\n      var singleColumn = _this.testColumns.length === 1;\n      // we want to track whether any column contains text, as this affects formatting\n      var containsText = false;\n      return _react2.default.createElement(\n        'div',\n        { className: _this.props.origin === 'iris' ? 'message left' : 'message right', style: _this.props.hidden === true ? { display: 'none' } : {} },\n        _react2.default.createElement(\n          'div',\n          { className: 'bubble table' },\n          _react2.default.createElement(\n            'div',\n            { className: 'data_table', style: { width: _this.testColumns.length * (350 + 10 + 1) } },\n            _react2.default.createElement(\n              'div',\n              { className: 'header' },\n              _this.testColumns.map(function (column, i) {\n                // define style attributes for the column programmatically, based on data-type\n                var newColStyle = {};\n                if (column.type === \"Text\") {\n                  newColStyle['width'] = 350;\n                  containsText = true;\n                }\n                if (singleColumn || i == 0) {\n                  newColStyle['border-left'] = 'none';\n                };\n                // not going to display more than 50 columns\n                // TODO: make this nicer, at least refactor to a global constant\n                if (i < 50) {\n                  return _react2.default.createElement(\n                    'span',\n                    { className: 'data_column', style: newColStyle },\n                    column.name\n                  );\n                }\n              })\n            ),\n            _this.testRows.map(function (row) {\n              var newRowStyle = {};\n              if (containsText) {\n                newRowStyle['height'] = '4em';\n              };\n              // TODO: this is almost identical to the mapping above. refactor?\n              return _react2.default.createElement(\n                'div',\n                { className: 'data_row', style: newRowStyle },\n                _this.testColumns.map(function (column, i) {\n                  var newColStyle = {};\n                  if (column.type === \"Text\") {\n                    newColStyle['width'] = 350;\n                  }\n                  if (containsText) {\n                    newColStyle['height'] = '4em';\n                  }\n                  if (singleColumn || i == 0) {\n                    newColStyle['border-left'] = 'none';\n                  };\n                  if (i < 50) {\n                    return _react2.default.createElement(\n                      'span',\n                      { className: 'data_column', style: newColStyle },\n                      row[column.name]\n                    );\n                  }\n                })\n              );\n            })\n          )\n        )\n      );\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  return CollectionMessage;\n}(_react.Component);\n\nCollectionMessage.propTypes = proptypes.messageType;\n\nexports.default = CollectionMessage;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9Db2xsZWN0aW9uTWVzc2FnZS5qcz8wZDQ2Il0sIm5hbWVzIjpbInByb3B0eXBlcyIsIkNvbGxlY3Rpb25NZXNzYWdlIiwicmVuZGVyIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsInByb3BzIiwidGV4dCIsInRlc3RDb2x1bW5zIiwidGVzdFJvd3MiLCJzaW5nbGVDb2x1bW4iLCJsZW5ndGgiLCJjb250YWluc1RleHQiLCJvcmlnaW4iLCJoaWRkZW4iLCJkaXNwbGF5Iiwid2lkdGgiLCJtYXAiLCJjb2x1bW4iLCJpIiwibmV3Q29sU3R5bGUiLCJ0eXBlIiwibmFtZSIsIm5ld1Jvd1N0eWxlIiwicm93IiwicHJvcFR5cGVzIiwibWVzc2FnZVR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7SUFBWUEsUzs7Ozs7Ozs7Ozs7O0FBRVo7QUFDQTtJQUNNQyxpQjs7Ozs7Ozs7Ozs7Ozs7NE1BRUpDLE0sR0FBUyxZQUFNO0FBQ2I7QUFDQTtBQUNBLFVBQU1DLE9BQU9DLEtBQUtDLEtBQUwsQ0FBVyxNQUFLQyxLQUFMLENBQVdDLElBQXRCLENBQWI7QUFDQSxZQUFLQyxXQUFMLEdBQW1CTCxLQUFLLGFBQUwsQ0FBbkI7QUFDQSxZQUFLTSxRQUFMLEdBQWdCTixLQUFLLFVBQUwsQ0FBaEI7QUFDQTtBQUNBLFVBQUlPLGVBQWUsTUFBS0YsV0FBTCxDQUFpQkcsTUFBakIsS0FBNEIsQ0FBL0M7QUFDQTtBQUNBLFVBQUlDLGVBQWUsS0FBbkI7QUFDQSxhQUFRO0FBQUE7QUFBQSxVQUFLLFdBQWEsTUFBS04sS0FBTCxDQUFXTyxNQUFYLEtBQXNCLE1BQXRCLEdBQStCLGNBQS9CLEdBQWdELGVBQWxFLEVBQW1GLE9BQU8sTUFBS1AsS0FBTCxDQUFXUSxNQUFYLEtBQXNCLElBQXRCLEdBQTZCLEVBQUNDLFNBQVMsTUFBVixFQUE3QixHQUFpRCxFQUEzSTtBQUNKO0FBQUE7QUFBQSxZQUFLLFdBQVUsY0FBZjtBQUNBO0FBQUE7QUFBQSxjQUFLLFdBQVUsWUFBZixFQUE0QixPQUFPLEVBQUNDLE9BQU8sTUFBS1IsV0FBTCxDQUFpQkcsTUFBakIsSUFBMkIsTUFBSSxFQUFKLEdBQU8sQ0FBbEMsQ0FBUixFQUFuQztBQUNFO0FBQUE7QUFBQSxnQkFBSyxXQUFVLFFBQWY7QUFDQyxvQkFBS0gsV0FBTCxDQUFpQlMsR0FBakIsQ0FBcUIsVUFBQ0MsTUFBRCxFQUFRQyxDQUFSLEVBQWM7QUFDbEM7QUFDQSxvQkFBSUMsY0FBYyxFQUFsQjtBQUNBLG9CQUFHRixPQUFPRyxJQUFQLEtBQWdCLE1BQW5CLEVBQTBCO0FBQ3hCRCw4QkFBWSxPQUFaLElBQXVCLEdBQXZCO0FBQ0FSLGlDQUFlLElBQWY7QUFDRDtBQUNELG9CQUFJRixnQkFBZ0JTLEtBQUssQ0FBekIsRUFBMkI7QUFBRUMsOEJBQVksYUFBWixJQUE2QixNQUE3QjtBQUFxQztBQUNsRTtBQUNBO0FBQ0Esb0JBQUdELElBQUksRUFBUCxFQUFVO0FBQ1IseUJBQU87QUFBQTtBQUFBLHNCQUFNLFdBQVUsYUFBaEIsRUFBOEIsT0FBT0MsV0FBckM7QUFBbURGLDJCQUFPSTtBQUExRCxtQkFBUDtBQUNEO0FBQ0YsZUFiQTtBQURELGFBREY7QUFpQkcsa0JBQUtiLFFBQUwsQ0FBY1EsR0FBZCxDQUFrQixlQUFPO0FBQ3hCLGtCQUFJTSxjQUFjLEVBQWxCO0FBQ0Esa0JBQUlYLFlBQUosRUFBaUI7QUFBRVcsNEJBQVksUUFBWixJQUF3QixLQUF4QjtBQUE4QjtBQUNqRDtBQUNBLHFCQUFRO0FBQUE7QUFBQSxrQkFBSyxXQUFVLFVBQWYsRUFBMEIsT0FBT0EsV0FBakM7QUFDTCxzQkFBS2YsV0FBTCxDQUFpQlMsR0FBakIsQ0FBcUIsVUFBQ0MsTUFBRCxFQUFTQyxDQUFULEVBQWU7QUFDbkMsc0JBQUlDLGNBQWMsRUFBbEI7QUFDQSxzQkFBR0YsT0FBT0csSUFBUCxLQUFnQixNQUFuQixFQUEwQjtBQUN4QkQsZ0NBQVksT0FBWixJQUF1QixHQUF2QjtBQUNEO0FBQ0Qsc0JBQUdSLFlBQUgsRUFBZ0I7QUFDZFEsZ0NBQVksUUFBWixJQUF3QixLQUF4QjtBQUNEO0FBQ0Qsc0JBQUlWLGdCQUFnQlMsS0FBSyxDQUF6QixFQUEyQjtBQUFFQyxnQ0FBWSxhQUFaLElBQTZCLE1BQTdCO0FBQXFDO0FBQ2xFLHNCQUFHRCxJQUFJLEVBQVAsRUFBVTtBQUNSLDJCQUFPO0FBQUE7QUFBQSx3QkFBTSxXQUFVLGFBQWhCLEVBQThCLE9BQU9DLFdBQXJDO0FBQW1ESSwwQkFBSU4sT0FBT0ksSUFBWDtBQUFuRCxxQkFBUDtBQUNEO0FBQ0YsaUJBWkE7QUFESyxlQUFSO0FBZUQsYUFuQkE7QUFqQkg7QUFEQTtBQURJLE9BQVI7QUEwQ0QsSzs7Ozs7O0FBSUhyQixrQkFBa0J3QixTQUFsQixHQUE4QnpCLFVBQVUwQixXQUF4Qzs7a0JBRWV6QixpQiIsImZpbGUiOiI0OTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3REYXRhR3JpZCBmcm9tICdyZWFjdC1kYXRhLWdyaWQnO1xuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBwcm9wdHlwZXMgZnJvbSAnLi4vcHJvcHR5cGVzL3R5cGVzJztcblxuLy8gQ2xhc3MgdG8gZGVmaW5lIHNwZWFkc2hlZXQtbGlrZSBkYXRhIGZvciBJcmlzXG4vLyBUb2RvOiBzb21lIG9mIHRoZXNlIHNob3VsZCBiZSByZWZhY3RvcmVkLCBhcyBpdCBpcyByZXBlYXRlZCBpbiBUYWJsZVNlbGVjdE1lc3NhZ2VcbmNsYXNzIENvbGxlY3Rpb25NZXNzYWdlIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICByZW5kZXIgPSAoKSA9PiB7XG4gICAgLy8gcGFyc2Ugb3V0IHNwcmVhZHNoZWV0IGRhdGEgcGFzc2VkIHRvIGNvbXBvbmVudFxuICAgIC8vIFRvZG86IHNob3VsZCB0aGlzIGhhcHBlbiBlbHNld2hlcmU/IGlmIG5vdCwgcmVuYW1lIHByb3A/XG4gICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UodGhpcy5wcm9wcy50ZXh0KTtcbiAgICB0aGlzLnRlc3RDb2x1bW5zID0gZGF0YVtcImNvbHVtbl9kYXRhXCJdO1xuICAgIHRoaXMudGVzdFJvd3MgPSBkYXRhW1wicm93X2RhdGFcIl07XG4gICAgLy8gc3BlY2lhbCBkaXNwbGF5IGNhc2UgZm9yIHNpbmdsZSBjb2x1bW4gZGF0YWZyYW1lXG4gICAgbGV0IHNpbmdsZUNvbHVtbiA9IHRoaXMudGVzdENvbHVtbnMubGVuZ3RoID09PSAxO1xuICAgIC8vIHdlIHdhbnQgdG8gdHJhY2sgd2hldGhlciBhbnkgY29sdW1uIGNvbnRhaW5zIHRleHQsIGFzIHRoaXMgYWZmZWN0cyBmb3JtYXR0aW5nXG4gICAgbGV0IGNvbnRhaW5zVGV4dCA9IGZhbHNlO1xuICAgIHJldHVybiAoPGRpdiBjbGFzc05hbWUgPSB7dGhpcy5wcm9wcy5vcmlnaW4gPT09ICdpcmlzJyA/ICdtZXNzYWdlIGxlZnQnIDogJ21lc3NhZ2UgcmlnaHQnfSBzdHlsZT17dGhpcy5wcm9wcy5oaWRkZW4gPT09IHRydWUgPyB7ZGlzcGxheTogJ25vbmUnfSA6IHt9fT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidWJibGUgdGFibGVcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYXRhX3RhYmxlXCIgc3R5bGU9e3t3aWR0aDogdGhpcy50ZXN0Q29sdW1ucy5sZW5ndGggKiAoMzUwKzEwKzEpfX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cbiAgICAgICAgICB7dGhpcy50ZXN0Q29sdW1ucy5tYXAoKGNvbHVtbixpKSA9PiB7XG4gICAgICAgICAgICAvLyBkZWZpbmUgc3R5bGUgYXR0cmlidXRlcyBmb3IgdGhlIGNvbHVtbiBwcm9ncmFtbWF0aWNhbGx5LCBiYXNlZCBvbiBkYXRhLXR5cGVcbiAgICAgICAgICAgIGxldCBuZXdDb2xTdHlsZSA9IHt9O1xuICAgICAgICAgICAgaWYoY29sdW1uLnR5cGUgPT09IFwiVGV4dFwiKXtcbiAgICAgICAgICAgICAgbmV3Q29sU3R5bGVbJ3dpZHRoJ10gPSAzNTA7XG4gICAgICAgICAgICAgIGNvbnRhaW5zVGV4dCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2luZ2xlQ29sdW1uIHx8IGkgPT0gMCl7IG5ld0NvbFN0eWxlWydib3JkZXItbGVmdCddID0gJ25vbmUnIH07XG4gICAgICAgICAgICAvLyBub3QgZ29pbmcgdG8gZGlzcGxheSBtb3JlIHRoYW4gNTAgY29sdW1uc1xuICAgICAgICAgICAgLy8gVE9ETzogbWFrZSB0aGlzIG5pY2VyLCBhdCBsZWFzdCByZWZhY3RvciB0byBhIGdsb2JhbCBjb25zdGFudFxuICAgICAgICAgICAgaWYoaSA8IDUwKXtcbiAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT1cImRhdGFfY29sdW1uXCIgc3R5bGU9e25ld0NvbFN0eWxlfT57Y29sdW1uLm5hbWV9PC9zcGFuPjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7dGhpcy50ZXN0Um93cy5tYXAocm93ID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdSb3dTdHlsZSA9IHt9O1xuICAgICAgICAgICAgaWYgKGNvbnRhaW5zVGV4dCl7IG5ld1Jvd1N0eWxlWydoZWlnaHQnXSA9ICc0ZW0nfTtcbiAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYWxtb3N0IGlkZW50aWNhbCB0byB0aGUgbWFwcGluZyBhYm92ZS4gcmVmYWN0b3I/XG4gICAgICAgICAgICByZXR1cm4gKDxkaXYgY2xhc3NOYW1lPVwiZGF0YV9yb3dcIiBzdHlsZT17bmV3Um93U3R5bGV9PlxuICAgICAgICAgICAgICB7dGhpcy50ZXN0Q29sdW1ucy5tYXAoKGNvbHVtbiwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBuZXdDb2xTdHlsZSA9IHt9O1xuICAgICAgICAgICAgICAgIGlmKGNvbHVtbi50eXBlID09PSBcIlRleHRcIil7XG4gICAgICAgICAgICAgICAgICBuZXdDb2xTdHlsZVsnd2lkdGgnXSA9IDM1MDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoY29udGFpbnNUZXh0KXtcbiAgICAgICAgICAgICAgICAgIG5ld0NvbFN0eWxlWydoZWlnaHQnXSA9ICc0ZW0nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2luZ2xlQ29sdW1uIHx8IGkgPT0gMCl7IG5ld0NvbFN0eWxlWydib3JkZXItbGVmdCddID0gJ25vbmUnIH07XG4gICAgICAgICAgICAgICAgaWYoaSA8IDUwKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiA8c3BhbiBjbGFzc05hbWU9XCJkYXRhX2NvbHVtblwiIHN0eWxlPXtuZXdDb2xTdHlsZX0+e3Jvd1tjb2x1bW4ubmFtZV19PC9zcGFuPjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9kaXY+KVxuICAgICAgICAgIH0pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+KTtcbiAgfVxuXG59XG5cbkNvbGxlY3Rpb25NZXNzYWdlLnByb3BUeXBlcyA9IHByb3B0eXBlcy5tZXNzYWdlVHlwZTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sbGVjdGlvbk1lc3NhZ2U7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9Db2xsZWN0aW9uTWVzc2FnZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ })

})