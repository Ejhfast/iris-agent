webpackHotUpdate(0,{

/***/ 501:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.setInput = exports.PredictionStrip = undefined;\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _InputBox = __webpack_require__(130);\n\nvar _python = __webpack_require__(61);\n\nvar _index = __webpack_require__(35);\n\nvar _reactRedux = __webpack_require__(30);\n\nvar _lodash = __webpack_require__(140);\n\nvar _ = _interopRequireWildcard(_lodash);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// set main input text and update hint\nvar setInput = function setInput(dispatch, text, id) {\n    return function () {\n        var stripText = text.replace(/{/g, '').replace(/}/g, '');\n        _InputBox.input.value = stripText;\n        (0, _python.updateHint)(stripText);\n        dispatch((0, _index.storeClassIndex)(id));\n    };\n};\n\nvar reorder = function reorder(currIndex, predictions) {\n    console.log(currIndex, predictions);\n    return [].concat(_toConsumableArray(_.filter(predictions, function (p) {\n        return p.id === currIndex;\n    })), _toConsumableArray(_.filter(predictions, function (p) {\n        return p.id !== currIndex;\n    })));\n};\n\n// TODO: should logic that binds to tab-key press be here as well?\n\n// defines component for prediction strip above main input text\nvar PredictionStrip = function PredictionStrip(_ref) {\n    var dispatch = _ref.dispatch,\n        predictions = _ref.predictions,\n        currIndex = _ref.currIndex;\n\n    // TODO: optimize width\n    var charLength = predictions.map(function (p) {\n        return p.text.length;\n    }).reduce(function (x, y) {\n        return x + y;\n    }, 0);\n    return _react2.default.createElement(\n        'div',\n        { className: 'prediction_strip' },\n        _react2.default.createElement(\n            'div',\n            { className: 'predictions', style: { width: charLength * 9 + \"px\" } },\n            reorder(currIndex, predictions).map(function (obj, i) {\n                return _react2.default.createElement(\n                    'span',\n                    { onClick: setInput(dispatch, obj.text, obj.id), className: \"prediction \" + obj.style },\n                    obj.text\n                );\n            })\n        )\n    );\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n    return {\n        predictions: state.predictions,\n        currIndex: state.currentInput.currIndex // for selected prediction\n    };\n};\n\nexports.PredictionStrip = PredictionStrip = (0, _reactRedux.connect)(mapStateToProps)(PredictionStrip);\n\nexports.PredictionStrip = PredictionStrip;\nexports.setInput = setInput;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9QcmVkaWN0aW9uU3RyaXAuanM/ZDFhMiJdLCJuYW1lcyI6WyJfIiwic2V0SW5wdXQiLCJkaXNwYXRjaCIsInRleHQiLCJpZCIsInN0cmlwVGV4dCIsInJlcGxhY2UiLCJ2YWx1ZSIsInJlb3JkZXIiLCJjdXJySW5kZXgiLCJwcmVkaWN0aW9ucyIsImNvbnNvbGUiLCJsb2ciLCJmaWx0ZXIiLCJwIiwiUHJlZGljdGlvblN0cmlwIiwiY2hhckxlbmd0aCIsIm1hcCIsImxlbmd0aCIsInJlZHVjZSIsIngiLCJ5Iiwid2lkdGgiLCJvYmoiLCJpIiwic3R5bGUiLCJtYXBTdGF0ZVRvUHJvcHMiLCJzdGF0ZSIsImN1cnJlbnRJbnB1dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0lBQVlBLEM7Ozs7Ozs7O0FBRVo7QUFDQSxJQUFNQyxXQUFXLFNBQVhBLFFBQVcsQ0FBQ0MsUUFBRCxFQUFXQyxJQUFYLEVBQWlCQyxFQUFqQixFQUF3QjtBQUNyQyxXQUFPLFlBQU07QUFDVCxZQUFJQyxZQUFZRixLQUFLRyxPQUFMLENBQWEsSUFBYixFQUFtQixFQUFuQixFQUF1QkEsT0FBdkIsQ0FBK0IsSUFBL0IsRUFBcUMsRUFBckMsQ0FBaEI7QUFDQSx3QkFBTUMsS0FBTixHQUFjRixTQUFkO0FBQ0EsZ0NBQVdBLFNBQVg7QUFDQUgsaUJBQVMsNEJBQWdCRSxFQUFoQixDQUFUO0FBQ0gsS0FMRDtBQU1ILENBUEQ7O0FBU0EsSUFBTUksVUFBVSxTQUFWQSxPQUFVLENBQUNDLFNBQUQsRUFBWUMsV0FBWixFQUE0QjtBQUMxQ0MsWUFBUUMsR0FBUixDQUFZSCxTQUFaLEVBQXVCQyxXQUF2QjtBQUNBLHdDQUFZVixFQUFFYSxNQUFGLENBQVNILFdBQVQsRUFBc0IsVUFBQ0ksQ0FBRDtBQUFBLGVBQU9BLEVBQUVWLEVBQUYsS0FBU0ssU0FBaEI7QUFBQSxLQUF0QixDQUFaLHNCQUFtRVQsRUFBRWEsTUFBRixDQUFTSCxXQUFULEVBQXNCLFVBQUNJLENBQUQ7QUFBQSxlQUFPQSxFQUFFVixFQUFGLEtBQVNLLFNBQWhCO0FBQUEsS0FBdEIsQ0FBbkU7QUFDRCxDQUhEOztBQUtBOztBQUVBO0FBQ0EsSUFBSU0sa0JBQWtCLCtCQUF3QztBQUFBLFFBQXRDYixRQUFzQyxRQUF0Q0EsUUFBc0M7QUFBQSxRQUE1QlEsV0FBNEIsUUFBNUJBLFdBQTRCO0FBQUEsUUFBZkQsU0FBZSxRQUFmQSxTQUFlOztBQUM1RDtBQUNBLFFBQU1PLGFBQWFOLFlBQVlPLEdBQVosQ0FBZ0IsVUFBQ0gsQ0FBRDtBQUFBLGVBQU9BLEVBQUVYLElBQUYsQ0FBT2UsTUFBZDtBQUFBLEtBQWhCLEVBQXNDQyxNQUF0QyxDQUE2QyxVQUFDQyxDQUFELEVBQUdDLENBQUg7QUFBQSxlQUFTRCxJQUFJQyxDQUFiO0FBQUEsS0FBN0MsRUFBNkQsQ0FBN0QsQ0FBbkI7QUFDQSxXQUFRO0FBQUE7QUFBQSxVQUFLLFdBQVUsa0JBQWY7QUFDRjtBQUFBO0FBQUEsY0FBSyxXQUFVLGFBQWYsRUFBNkIsT0FBTyxFQUFDQyxPQUFRTixhQUFhLENBQWQsR0FBbUIsSUFBM0IsRUFBcEM7QUFDR1Isb0JBQVFDLFNBQVIsRUFBbUJDLFdBQW5CLEVBQWdDTyxHQUFoQyxDQUFvQyxVQUFDTSxHQUFELEVBQUtDLENBQUw7QUFBQSx1QkFBVztBQUFBO0FBQUEsc0JBQU0sU0FBU3ZCLFNBQVNDLFFBQVQsRUFBbUJxQixJQUFJcEIsSUFBdkIsRUFBNkJvQixJQUFJbkIsRUFBakMsQ0FBZixFQUFxRCxXQUFXLGdCQUFnQm1CLElBQUlFLEtBQXBGO0FBQTZGRix3QkFBSXBCO0FBQWpHLGlCQUFYO0FBQUEsYUFBcEM7QUFESDtBQURFLEtBQVI7QUFLRCxDQVJEOztBQVlBLElBQU11QixrQkFBa0IsU0FBbEJBLGVBQWtCLENBQUNDLEtBQUQ7QUFBQSxXQUFZO0FBQ2hDakIscUJBQWFpQixNQUFNakIsV0FEYTtBQUVoQ0QsbUJBQVdrQixNQUFNQyxZQUFOLENBQW1CbkIsU0FGRSxDQUVRO0FBRlIsS0FBWjtBQUFBLENBQXhCOztBQUtBLFFBRVFNLGVBRlIscUJBQWtCLHlCQUFRVyxlQUFSLEVBQXlCWCxlQUF6QixDQUFsQjs7UUFFUUEsZSxHQUFBQSxlO1FBQWlCZCxRLEdBQUFBLFEiLCJmaWxlIjoiNTAxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlucHV0IH0gZnJvbSAnLi4vY29udGFpbmVycy9JbnB1dEJveCc7XG5pbXBvcnQgeyB1cGRhdGVIaW50IH0gZnJvbSAnLi4vYXBpX2NhbGxzL3B5dGhvbi5qcyc7XG5pbXBvcnQgeyBzdG9yZUNsYXNzSW5kZXgsIGNsZWFyQ2xhc3NJbmRleCB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXguanMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuLy8gc2V0IG1haW4gaW5wdXQgdGV4dCBhbmQgdXBkYXRlIGhpbnRcbmNvbnN0IHNldElucHV0ID0gKGRpc3BhdGNoLCB0ZXh0ICxpZCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxldCBzdHJpcFRleHQgPSB0ZXh0LnJlcGxhY2UoL3svZywgJycpLnJlcGxhY2UoL30vZywgJycpO1xuICAgICAgICBpbnB1dC52YWx1ZSA9IHN0cmlwVGV4dDtcbiAgICAgICAgdXBkYXRlSGludChzdHJpcFRleHQpO1xuICAgICAgICBkaXNwYXRjaChzdG9yZUNsYXNzSW5kZXgoaWQpKTtcbiAgICB9O1xufTtcblxuY29uc3QgcmVvcmRlciA9IChjdXJySW5kZXgsIHByZWRpY3Rpb25zKSA9PiB7XG4gIGNvbnNvbGUubG9nKGN1cnJJbmRleCwgcHJlZGljdGlvbnMpXG4gIHJldHVybiBbLi4uKF8uZmlsdGVyKHByZWRpY3Rpb25zLCAocCkgPT4gcC5pZCA9PT0gY3VyckluZGV4KSksIC4uLihfLmZpbHRlcihwcmVkaWN0aW9ucywgKHApID0+IHAuaWQgIT09IGN1cnJJbmRleCkpXVxufTtcblxuLy8gVE9ETzogc2hvdWxkIGxvZ2ljIHRoYXQgYmluZHMgdG8gdGFiLWtleSBwcmVzcyBiZSBoZXJlIGFzIHdlbGw/XG5cbi8vIGRlZmluZXMgY29tcG9uZW50IGZvciBwcmVkaWN0aW9uIHN0cmlwIGFib3ZlIG1haW4gaW5wdXQgdGV4dFxubGV0IFByZWRpY3Rpb25TdHJpcCA9ICh7ZGlzcGF0Y2gsIHByZWRpY3Rpb25zLCBjdXJySW5kZXh9KSA9PiB7XG4gIC8vIFRPRE86IG9wdGltaXplIHdpZHRoXG4gIGNvbnN0IGNoYXJMZW5ndGggPSBwcmVkaWN0aW9ucy5tYXAoKHApID0+IHAudGV4dC5sZW5ndGgpLnJlZHVjZSgoeCx5KSA9PiB4ICsgeSwgMCk7XG4gIHJldHVybiAoPGRpdiBjbGFzc05hbWU9XCJwcmVkaWN0aW9uX3N0cmlwXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJlZGljdGlvbnNcIiBzdHlsZT17e3dpZHRoOiAoY2hhckxlbmd0aCAqIDkpICsgXCJweFwifX0+XG4gICAgICAgICAge3Jlb3JkZXIoY3VyckluZGV4LCBwcmVkaWN0aW9ucykubWFwKChvYmosaSkgPT4gPHNwYW4gb25DbGljaz17c2V0SW5wdXQoZGlzcGF0Y2gsIG9iai50ZXh0LCBvYmouaWQpfSBjbGFzc05hbWU9e1wicHJlZGljdGlvbiBcIiArIG9iai5zdHlsZX0+eyBvYmoudGV4dCB9PC9zcGFuPil9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+KTtcbn07XG5cblxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+ICh7XG4gICAgcHJlZGljdGlvbnM6IHN0YXRlLnByZWRpY3Rpb25zLFxuICAgIGN1cnJJbmRleDogc3RhdGUuY3VycmVudElucHV0LmN1cnJJbmRleCAvLyBmb3Igc2VsZWN0ZWQgcHJlZGljdGlvblxufSk7XG5cblByZWRpY3Rpb25TdHJpcCA9IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShQcmVkaWN0aW9uU3RyaXApO1xuXG5leHBvcnQge1ByZWRpY3Rpb25TdHJpcCwgc2V0SW5wdXR9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvUHJlZGljdGlvblN0cmlwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ })

})