webpackHotUpdate(0,{

/***/ 43:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Actions are typed objects passed to the redux reducer that manages state transformations\n// TODO: potentially break this file into multiple files, one for each reducer action-set\n\nexports.addMessage = addMessage;\nexports.hideConversation = hideConversation;\nexports.updateCodeEditor = updateCodeEditor;\nexports.updateCommand = updateCommand;\nexports.addExample = addExample;\nexports.deleteCommandExample = deleteCommandExample;\nexports.updateCommandExample = updateCommandExample;\nexports.addCommandArg = addCommandArg;\nexports.updateCommandArg = updateCommandArg;\nexports.deleteCommandArg = deleteCommandArg;\nexports.resetCommand = resetCommand;\nexports.storeCurrentInput = storeCurrentInput;\nexports.storeClassIndex = storeClassIndex;\nexports.clearClassIndex = clearClassIndex;\nexports.setDocs = setDocs;\nexports.setCodeEdit = setCodeEdit;\nexports.updateDocEvent = updateDocEvent;\nexports.updateFunc = updateFunc;\nexports.updateResults = updateResults;\nexports.addInputHistory = addInputHistory;\nexports.moveInputHistory = moveInputHistory;\nexports.updatePredictions = updatePredictions;\nexports.updateVariables = updateVariables;\n\nvar _types = __webpack_require__(314);\n\nvar types = _interopRequireWildcard(_types);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n// The conversation reducer governs display of main conversational window\n// This window contains multiple conversations, where each conversation is defined by a top-level command call\n\n// Add a message to the current conversation\nfunction addMessage(message) {\n    return _extends({\n        type: types.ADD_MESSAGE\n    }, message);\n}\n\n// Toggle whether a conversation is visible in the chat history\nfunction hideConversation(id) {\n    return {\n        type: types.HIDE_CONVERSATION,\n        id: id\n    };\n}\n\n// -----------------------------------------------\n\n// The commandEditPane reducer governs state for the commmand editing GUI\n\n// Update any field (name) of the command editor with a new value (value)\n// TODO: documentation of command editor state structure outside of reducer?\nfunction updateCodeEditor(name, value) {\n    return {\n        type: types.UPDATE_CODE_EDITOR,\n        value: value,\n        name: name\n    };\n}\n\n// Update the command source field\n// TODO: is this redundant with UpdateCodeEditor\nfunction updateCommand(command) {\n    return {\n        type: types.UPDATE_COMMAND,\n        command: command\n    };\n}\n\n// Append a new example field to the current command editor data\nfunction addExample() {\n    return {\n        type: types.ADD_COMMAND_EXAMPLE\n    };\n}\n\n// Delete a command example by its id (position in example list)\nfunction deleteCommandExample(id) {\n    return {\n        type: types.DELETE_COMMAND_EXAMPLE,\n        id: id\n    };\n}\n\n// Update a command example by its id\nfunction updateCommandExample(id, text) {\n    return {\n        type: types.UPDATE_COMMAND_EXAMPLE,\n        id: id,\n        text: text\n    };\n}\n\n// Append a new argument field to the current command editor data\nfunction addCommandArg() {\n    return {\n        type: types.ADD_COMMAND_ARG\n    };\n}\n\n// Update a command argument by its id (position in list of argument)\n// TODO: make contents of values more explicit\nfunction updateCommandArg(id, values) {\n    return {\n        type: types.UPDATE_COMMAND_ARG,\n        id: id,\n        values: values\n    };\n}\n\n// Delete a command argument by its id\nfunction deleteCommandArg(id) {\n    return {\n        type: types.DELETE_COMMAND_ARG,\n        id: id\n    };\n}\n\n// Clear the command edit pane\nfunction resetCommand() {\n    return {\n        type: types.RESET_COMMAND\n    };\n}\n\n// -----------------------------------------------\n\n// The currentInput reducer keeps track of the user input on the main conversational pane\n\n// Save a new value to the current user input\nfunction storeCurrentInput(input) {\n    return {\n        type: types.STORE_CURRENT_INPUT,\n        currentInput: input\n    };\n}\n\nfunction storeClassIndex(id) {\n    return {\n        type: types.STORE_CURRENT_INPUT,\n        class_index: id\n    };\n}\n\nfunction clearClassIndex(id) {\n    return {\n        type: types.STORE_CURRENT_INPUT\n    };\n}\n\n// -----------------------------------------------\n\n// The minimizeState reducer governs which panes are displayed in the GUI\n\n// Set visibility of docs window\n// TODO: pull out .docs to make explicit, also rename (it is a bool )\nfunction setDocs(message) {\n    return _extends({\n        type: types.SET_DOCS\n    }, message);\n}\n\n// Set visibility of command editor window\n// TODO: pull out .code_edit to make explicit, also rename (it is a bool value)\nfunction setCodeEdit(message) {\n    return _extends({\n        type: types.SET_CODE_EDIT\n    }, message);\n}\n\n// -----------------------------------------------\n\n// The docs reducer governs state for the documentation display window\n\n// Update the docs window with new text\n// TODO: pull out .doc to make explicit, and possible destructure that object as well\nfunction updateDocEvent(message) {\n    return _extends({\n        type: types.UPDATE_DOCS\n    }, message);\n}\n\n// -----------------------------------------------\n\n// The functionSearch reducer governs state for the function search component\n\n// Update the query given changes in user input text\n// TODO: rename and pull out .search to make explicit\nfunction updateFunc(message) {\n    return _extends({\n        type: types.UPDATE_FUNC\n    }, message);\n}\n\n// Update the search box with a list of results\n// TODO: pull out .results to make explicit\nfunction updateResults(message) {\n    return {\n        type: types.UPDATE_RESULTS,\n        results: message\n    };\n}\n\n// -----------------------------------------------\n\n// The inputHistory reducer governs state for the up-arrow, down-arrow command history log\n\n// Add a new message/command to the inputHistory\nfunction addInputHistory(message) {\n    return _extends({\n        type: types.ADD_INPUT_HISTORY\n    }, message);\n}\n// Move the input history in one direction or another (repopulating query box)\n// TODO: message contains .direction, make this explicit\nfunction moveInputHistory(message) {\n    return _extends({\n        type: types.MOVE_INPUT_HISTORY\n    }, message);\n}\n\n// -----------------------------------------------\n\n// the predictions reducer governs the hints that appear above the main user input\n\n// update with new set of hints\nfunction updatePredictions(predictions) {\n    return {\n        type: types.UPDATE_PREDICTIONS,\n        predictions: predictions\n    };\n}\n\n// -----------------------------------------------\n\n// the variables reducer governs the variables that appear right sidebar\n\n// update with new set of hints\nfunction updateVariables(variables) {\n    return {\n        type: types.UPDATE_VARIABLES,\n        variables: variables\n    };\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

})