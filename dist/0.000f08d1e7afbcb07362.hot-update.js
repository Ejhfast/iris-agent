webpackHotUpdate(0,{

/***/ 42:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.filterTable = filterTable;\nexports.addMessage = addMessage;\nexports.addInputHistory = addInputHistory;\nexports.moveInputHistory = moveInputHistory;\nexports.hint = hint;\nexports.updateFunc = updateFunc;\nexports.updateResults = updateResults;\nexports.updateDocEvent = updateDocEvent;\nexports.setDocs = setDocs;\nexports.setCodeEdit = setCodeEdit;\nexports.updateCodeEditor = updateCodeEditor;\nexports.addCommandArg = addCommandArg;\nexports.addExample = addExample;\nexports.updateCommandArg = updateCommandArg;\nexports.deleteCommandArg = deleteCommandArg;\nexports.deleteCommandExample = deleteCommandExample;\nexports.updateCommandExample = updateCommandExample;\nexports.storeCurrentInput = storeCurrentInput;\nexports.hideConversation = hideConversation;\n\nvar _types = __webpack_require__(274);\n\nvar types = _interopRequireWildcard(_types);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction filterTable(filter) {\n    return {\n        type: types.FILTER,\n        filter: filter\n    };\n}\n\nfunction addMessage(message) {\n    return _extends({\n        type: types.ADD_MESSAGE\n    }, message);\n}\n\nfunction addInputHistory(message) {\n    return _extends({\n        type: types.ADD_INPUT_HISTORY\n    }, message);\n}\n\nfunction moveInputHistory(message) {\n    return _extends({\n        type: types.MOVE_INPUT_HISTORY\n    }, message);\n}\n\nfunction hint(message) {\n    return _extends({\n        type: types.HINT\n    }, message);\n}\n\nfunction updateFunc(message) {\n    return _extends({\n        type: types.UPDATE_FUNC\n    }, message);\n}\n\nfunction updateResults(message) {\n    return _extends({\n        type: types.UPDATE_RESULTS\n    }, message);\n}\n\nfunction updateDocEvent(message) {\n    return _extends({\n        type: types.UPDATE_DOCS\n    }, message);\n}\n\nfunction setDocs(message) {\n    return _extends({\n        type: types.SET_DOCS\n    }, message);\n}\n\nfunction setCodeEdit(message) {\n    return _extends({\n        type: types.SET_CODE_EDIT\n    }, message);\n}\n\nfunction updateCodeEditor(name, value) {\n    return {\n        type: types.UPDATE_CODE_EDITOR,\n        value: value,\n        name: name\n    };\n}\n\nfunction addCommandArg() {\n    return {\n        type: types.ADD_COMMAND_ARG\n    };\n}\n\nfunction addExample() {\n    return {\n        type: types.ADD_COMMAND_EXAMPLE\n    };\n}\n\nfunction updateCommandArg(id, values) {\n    return {\n        type: types.UPDATE_COMMAND_ARG,\n        id: id,\n        values: values\n    };\n}\n\nfunction deleteCommandArg(id) {\n    return {\n        type: types.DELETE_COMMAND_ARG,\n        id: id\n    };\n}\n\nfunction deleteCommandExample(id) {\n    return {\n        type: types.DELETE_COMMAND_EXAMPLE,\n        id: id\n    };\n}\n\nfunction updateCommandExample(id, text) {\n    return {\n        type: types.DELETE_COMMAND_EXAMPLE,\n        text: text\n    };\n}\n\nfunction storeCurrentInput(input) {\n    return {\n        type: types.STORE_CURRENT_INPUT,\n        currentInput: input\n    };\n}\n\nfunction hideConversation(id) {\n    return {\n        type: types.HIDE_CONVERSATION,\n        id: id\n    };\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYWN0aW9ucy9pbmRleC5qcz8xMjM2Il0sIm5hbWVzIjpbImZpbHRlclRhYmxlIiwiYWRkTWVzc2FnZSIsImFkZElucHV0SGlzdG9yeSIsIm1vdmVJbnB1dEhpc3RvcnkiLCJoaW50IiwidXBkYXRlRnVuYyIsInVwZGF0ZVJlc3VsdHMiLCJ1cGRhdGVEb2NFdmVudCIsInNldERvY3MiLCJzZXRDb2RlRWRpdCIsInVwZGF0ZUNvZGVFZGl0b3IiLCJhZGRDb21tYW5kQXJnIiwiYWRkRXhhbXBsZSIsInVwZGF0ZUNvbW1hbmRBcmciLCJkZWxldGVDb21tYW5kQXJnIiwiZGVsZXRlQ29tbWFuZEV4YW1wbGUiLCJ1cGRhdGVDb21tYW5kRXhhbXBsZSIsInN0b3JlQ3VycmVudElucHV0IiwiaGlkZUNvbnZlcnNhdGlvbiIsInR5cGVzIiwiZmlsdGVyIiwidHlwZSIsIkZJTFRFUiIsIm1lc3NhZ2UiLCJBRERfTUVTU0FHRSIsIkFERF9JTlBVVF9ISVNUT1JZIiwiTU9WRV9JTlBVVF9ISVNUT1JZIiwiSElOVCIsIlVQREFURV9GVU5DIiwiVVBEQVRFX1JFU1VMVFMiLCJVUERBVEVfRE9DUyIsIlNFVF9ET0NTIiwiU0VUX0NPREVfRURJVCIsIm5hbWUiLCJ2YWx1ZSIsIlVQREFURV9DT0RFX0VESVRPUiIsIkFERF9DT01NQU5EX0FSRyIsIkFERF9DT01NQU5EX0VYQU1QTEUiLCJpZCIsInZhbHVlcyIsIlVQREFURV9DT01NQU5EX0FSRyIsIkRFTEVURV9DT01NQU5EX0FSRyIsIkRFTEVURV9DT01NQU5EX0VYQU1QTEUiLCJ0ZXh0IiwiaW5wdXQiLCJTVE9SRV9DVVJSRU5UX0lOUFVUIiwiY3VycmVudElucHV0IiwiSElERV9DT05WRVJTQVRJT04iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O1FBRWdCQSxXLEdBQUFBLFc7UUFPQUMsVSxHQUFBQSxVO1FBT0FDLGUsR0FBQUEsZTtRQU9BQyxnQixHQUFBQSxnQjtRQU9BQyxJLEdBQUFBLEk7UUFP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QUFFTSxTQUFTMUIsaUJBQVQsQ0FBMkIyQixLQUEzQixFQUFrQztBQUNyQyxXQUFPO0FBQ0h2QixjQUFNRixNQUFNMEIsbUJBRFQ7QUFFSEMsc0JBQWNGO0FBRlgsS0FBUDtBQUlIOztBQUVNLFNBQVMxQixnQkFBVCxDQUEwQm9CLEVBQTFCLEVBQThCO0FBQ2pDLFdBQU87QUFDSGpCLGNBQU1GLE1BQU00QixpQkFEVDtBQUVIVDtBQUZHLEtBQVA7QUFJSCIsImZpbGUiOiI0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyVGFibGUoZmlsdGVyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXMuRklMVEVSLFxuICAgICAgICBmaWx0ZXJcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXMuQUREX01FU1NBR0UsXG4gICAgICAgIC4uLm1lc3NhZ2VcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkSW5wdXRIaXN0b3J5KG1lc3NhZ2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlcy5BRERfSU5QVVRfSElTVE9SWSxcbiAgICAgICAgLi4ubWVzc2FnZVxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlSW5wdXRIaXN0b3J5KG1lc3NhZ2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlcy5NT1ZFX0lOUFVUX0hJU1RPUlksXG4gICAgICAgIC4uLm1lc3NhZ2VcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGludChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXMuSElOVCxcbiAgICAgICAgLi4ubWVzc2FnZVxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVGdW5jKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlcy5VUERBVEVfRlVOQyxcbiAgICAgICAgLi4ubWVzc2FnZVxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVSZXN1bHRzKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlcy5VUERBVEVfUkVTVUxUUyxcbiAgICAgICAgLi4ubWVzc2FnZVxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVEb2NFdmVudChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXMuVVBEQVRFX0RPQ1MsXG4gICAgICAgIC4uLm1lc3NhZ2VcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RG9jcyhtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXMuU0VUX0RPQ1MsXG4gICAgICAgIC4uLm1lc3NhZ2VcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29kZUVkaXQobWVzc2FnZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzLlNFVF9DT0RFX0VESVQsXG4gICAgICAgIC4uLm1lc3NhZ2VcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQ29kZUVkaXRvcihuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzLlVQREFURV9DT0RFX0VESVRPUixcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBuYW1lOiBuYW1lXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZENvbW1hbmRBcmcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXMuQUREX0NPTU1BTkRfQVJHLFxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRFeGFtcGxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzLkFERF9DT01NQU5EX0VYQU1QTEUsXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNvbW1hbmRBcmcoaWQsIHZhbHVlcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzLlVQREFURV9DT01NQU5EX0FSRyxcbiAgICAgICAgaWQsXG4gICAgICAgIHZhbHVlczp2YWx1ZXNcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlQ29tbWFuZEFyZyhpZCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzLkRFTEVURV9DT01NQU5EX0FSRyxcbiAgICAgICAgaWQsXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUNvbW1hbmRFeGFtcGxlKGlkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXMuREVMRVRFX0NPTU1BTkRfRVhBTVBMRSxcbiAgICAgICAgaWQsXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNvbW1hbmRFeGFtcGxlKGlkLCB0ZXh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXMuREVMRVRFX0NPTU1BTkRfRVhBTVBMRSxcbiAgICAgICAgdGV4dCxcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcmVDdXJyZW50SW5wdXQoaW5wdXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlcy5TVE9SRV9DVVJSRU5UX0lOUFVULFxuICAgICAgICBjdXJyZW50SW5wdXQ6IGlucHV0XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhpZGVDb252ZXJzYXRpb24oaWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlcy5ISURFX0NPTlZFUlNBVElPTixcbiAgICAgICAgaWRcbiAgICB9O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2FjdGlvbnMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 438:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactRedux = __webpack_require__(23);\n\nvar _index = __webpack_require__(42);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar examples = {};\n\nvar addExampleButton = function addExampleButton(dispatch) {\n  return function () {\n    dispatch((0, _index.addExample)());\n  };\n};\n\nvar onClickDelete = function onClickDelete(dispatch, id) {\n  return function () {\n    dispatch((0, _index.deleteCommandExample)(id));\n  };\n};\n\nvar onChangeInput = function onChangeInput(dispatch, id) {\n  return function () {\n    dispatch((0, _index.updateCommandExample)(id, examples[id].value));\n  };\n};\n\nvar ExamplesEditor = function ExamplesEditor(_ref) {\n  var dispatch = _ref.dispatch,\n      examples = _ref.examples;\n  return _react2.default.createElement(\n    'div',\n    { className: 'command_examples' },\n    _react2.default.createElement(\n      'button',\n      { onClick: addExampleButton(dispatch) },\n      'Add Example'\n    ),\n    examples.map(function (example, id) {\n      return _react2.default.createElement(\n        'div',\n        null,\n        _react2.default.createElement(\n          'div',\n          { className: 'example' },\n          _react2.default.createElement('input', { type: 'text', ref: function ref(node) {\n              examples[id] = node;\n            }, onChange: function onChange() {\n              return onChangeInput(dispatch, id);\n            }, value: example })\n        ),\n        _react2.default.createElement(\n          'button',\n          { onClick: onClickDelete(dispatch, id) },\n          'Delete'\n        )\n      );\n    })\n  );\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    examples: state.commandEditPane.examples\n  };\n};\n\nExamplesEditor = (0, _reactRedux.connect)(mapStateToProps)(ExamplesEditor);\n\nexports.default = ExamplesEditor;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9FeGFtcGxlc0VkaXRvci5qcz82NWIwIl0sIm5hbWVzIjpbImV4YW1wbGVzIiwiYWRkRXhhbXBsZUJ1dHRvbiIsImRpc3BhdGNoIiwib25DbGlja0RlbGV0ZSIsImlkIiwib25DaGFuZ2VJbnB1dCIsInZhbHVlIiwiRXhhbXBsZXNFZGl0b3IiLCJtYXAiLCJleGFtcGxlIiwibm9kZSIsIm1hcFN0YXRlVG9Qcm9wcyIsInN0YXRlIiwiY29tbWFuZEVkaXRQYW5lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7O0FBRUEsSUFBSUEsV0FBVyxFQUFmOztBQUVBLElBQU1DLG1CQUFtQixTQUFuQkEsZ0JBQW1CLENBQUNDLFFBQUQ7QUFBQSxTQUN2QixZQUFNO0FBQ0pBLGFBQVMsd0JBQVQ7QUFDRCxHQUhzQjtBQUFBLENBQXpCOztBQUtBLElBQU1DLGdCQUFnQixTQUFoQkEsYUFBZ0IsQ0FBQ0QsUUFBRCxFQUFXRSxFQUFYO0FBQUEsU0FDcEIsWUFBTTtBQUNKRixhQUFTLGlDQUFxQkUsRUFBckIsQ0FBVDtBQUNELEdBSG1CO0FBQUEsQ0FBdEI7O0FBS0EsSUFBTUMsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFDSCxRQUFELEVBQVdFLEVBQVg7QUFBQSxTQUNwQixZQUFNO0FBQ0pGLGFBQVMsaUNBQXFCRSxFQUFyQixFQUF5QkosU0FBU0ksRUFBVCxFQUFhRSxLQUF0QyxDQUFUO0FBQ0QsR0FIbUI7QUFBQSxDQUF0Qjs7QUFLQSxJQUFJQyxpQkFBaUI7QUFBQSxNQUFHTCxRQUFILFFBQUdBLFFBQUg7QUFBQSxNQUFhRixRQUFiLFFBQWFBLFFBQWI7QUFBQSxTQUNqQjtBQUFBO0FBQUEsTUFBSyxXQUFVLGtCQUFmO0FBQ0k7QUFBQTtBQUFBLFFBQVEsU0FBU0MsaUJBQWlCQyxRQUFqQixDQUFqQjtBQUFBO0FBQUEsS0FESjtBQUVLRixhQUFTUSxHQUFULENBQWEsVUFBQ0MsT0FBRCxFQUFVTCxFQUFWO0FBQUEsYUFBaUI7QUFBQTtBQUFBO0FBQUs7QUFBQTtBQUFBLFlBQUssV0FBVSxTQUFmO0FBQXlCLG1EQUFPLE1BQUssTUFBWixFQUFtQixLQUFLLG1CQUFRO0FBQUNKLHVCQUFTSSxFQUFULElBQWVNLElBQWY7QUFBcUIsYUFBdEQsRUFBd0QsVUFBVTtBQUFBLHFCQUFNTCxjQUFjSCxRQUFkLEVBQXdCRSxFQUF4QixDQUFOO0FBQUEsYUFBbEUsRUFBcUcsT0FBT0ssT0FBNUc7QUFBekIsU0FBTDtBQUEySjtBQUFBO0FBQUEsWUFBUSxTQUFTTixjQUFjRCxRQUFkLEVBQXdCRSxFQUF4QixDQUFqQjtBQUFBO0FBQUE7QUFBM0osT0FBakI7QUFBQSxLQUFiO0FBRkwsR0FEaUI7QUFBQSxDQUFyQjs7QUFNQSxJQUFNTyxrQkFBa0IsU0FBbEJBLGVBQWtCLENBQUNDLEtBQUQ7QUFBQSxTQUFZO0FBQ2xDWixjQUFVWSxNQUFNQyxlQUFOLENBQXNCYjtBQURFLEdBQVo7QUFBQSxDQUF4Qjs7QUFJQU8saUJBQWlCLHlCQUFRSSxlQUFSLEVBQXlCSixjQUF6QixDQUFqQjs7a0JBRWVBLGMiLCJmaWxlIjoiNDM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBhZGRFeGFtcGxlLCBkZWxldGVDb21tYW5kRXhhbXBsZSwgdXBkYXRlQ29tbWFuZEV4YW1wbGUgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4LmpzJztcblxubGV0IGV4YW1wbGVzID0ge307XG5cbmNvbnN0IGFkZEV4YW1wbGVCdXR0b24gPSAoZGlzcGF0Y2gpID0+XG4gICgpID0+IHtcbiAgICBkaXNwYXRjaChhZGRFeGFtcGxlKCkpO1xuICB9O1xuXG5jb25zdCBvbkNsaWNrRGVsZXRlID0gKGRpc3BhdGNoLCBpZCkgPT5cbiAgKCkgPT4ge1xuICAgIGRpc3BhdGNoKGRlbGV0ZUNvbW1hbmRFeGFtcGxlKGlkKSk7XG4gIH07XG5cbmNvbnN0IG9uQ2hhbmdlSW5wdXQgPSAoZGlzcGF0Y2gsIGlkKSA9PlxuICAoKSA9PiB7XG4gICAgZGlzcGF0Y2godXBkYXRlQ29tbWFuZEV4YW1wbGUoaWQsIGV4YW1wbGVzW2lkXS52YWx1ZSkpO1xuICB9O1xuXG5sZXQgRXhhbXBsZXNFZGl0b3IgPSAoeyBkaXNwYXRjaCwgZXhhbXBsZXMgfSkgPT5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1hbmRfZXhhbXBsZXNcIj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXthZGRFeGFtcGxlQnV0dG9uKGRpc3BhdGNoKX0+QWRkIEV4YW1wbGU8L2J1dHRvbj5cbiAgICAgICAge2V4YW1wbGVzLm1hcCgoZXhhbXBsZSwgaWQpID0+IDxkaXY+PGRpdiBjbGFzc05hbWU9XCJleGFtcGxlXCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVmPXtub2RlID0+IHtleGFtcGxlc1tpZF0gPSBub2RlO319IG9uQ2hhbmdlPXsoKSA9PiBvbkNoYW5nZUlucHV0KGRpc3BhdGNoLCBpZCl9IHZhbHVlPXtleGFtcGxlfSAvPjwvZGl2PjxidXR0b24gb25DbGljaz17b25DbGlja0RlbGV0ZShkaXNwYXRjaCwgaWQpfT5EZWxldGU8L2J1dHRvbj48L2Rpdj4pfVxuICAgIDwvZGl2PjtcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiAoe1xuICBleGFtcGxlczogc3RhdGUuY29tbWFuZEVkaXRQYW5lLmV4YW1wbGVzLFxufSk7XG5cbkV4YW1wbGVzRWRpdG9yID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEV4YW1wbGVzRWRpdG9yKTtcblxuZXhwb3J0IGRlZmF1bHQgRXhhbXBsZXNFZGl0b3I7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9FeGFtcGxlc0VkaXRvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 457:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _reactRouterRedux = __webpack_require__(394);\n\nvar _redux = __webpack_require__(267);\n\nvar _types = __webpack_require__(274);\n\nvar types = _interopRequireWildcard(_types);\n\nvar _lodash = __webpack_require__(160);\n\nvar _ = _interopRequireWildcard(_lodash);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar valueOrNull = function valueOrNull(value) {\n    if (value !== undefined) {\n        return value;\n    }\n    return null;\n};\n\nvar appendMessages = function appendMessages(oldMessages, action) {\n    // text, origin = 'user', type = null, arg = null) => {\n    var newMessages = [];\n    var currentMax = 0;\n    if (oldMessages.length > 0) {\n        console.log('map', _.map(oldMessages, function (m) {\n            return m.id;\n        }));\n        currentMax = _.max(_.map(oldMessages, function (m) {\n            return m.id;\n        }));\n    }\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = action.text[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var m = _step.value;\n\n            currentMax++;\n            newMessages.push({ 'origin': action.origin, 'text': m, 'id': currentMax,\n                'state': valueOrNull(action.state), 'arg': valueOrNull(action.arg) });\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    return oldMessages.concat(newMessages);\n};\n\nvar appendMessagesConvo = function appendMessagesConvo(convo, action) {\n    var messages = convo.messages;\n\n    return _extends({}, convo, { messages: appendMessages(messages, action), args: action.arg_map });\n};\n\nvar conversation = function conversation() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { 'history': [], 'currentConvo': { 'messages': [], 'title': null, 'hidden': false, 'id': 0, 'args': {} }, 'state': 'START' };\n    var action = arguments[1];\n    var history = state.history,\n        currentConvo = state.currentConvo;\n\n    var newConvo = void 0;\n    switch (action.type) {\n        case types.UPDATE_HISTORY:\n            console.log(action.conversation.currentConvo);\n            return { history: action.conversation.history, currentConvo: action.conversation.currentConvo, 'state': state.state };\n        case types.ADD_MESSAGE:\n            return { history: history, currentConvo: appendMessagesConvo(currentConvo, action), 'state': state.state };\n        case types.ADD_SERVER_MESSAGE:\n            if (action.text.length === 0) {\n                return state;\n            }\n            newConvo = appendMessagesConvo(currentConvo, action);\n            if (action.state === 'START') {\n                // hardcoding some logic here for syncing history with server on START\n                // this allows some commands to overwrite history immediately\n                var theId = action.history.length;\n                newConvo = _extends({}, newConvo, { title: action.label, id: theId });\n                return { history: action.history.concat([newConvo]), 'currentConvo': { 'messages': [], 'title': null, 'hidden': false, 'id': newConvo.id + 1, 'args': {} }, state: 'START' };\n            }\n            return { history: history, currentConvo: newConvo, state: action.state };\n        case types.HIDE_CONVERSATION:\n            var newHistory = _.map(history, function (conv) {\n                var out = _extends({}, conv);\n                if (conv.id === action.id) {\n                    out.hidden = !out.hidden;\n                }\n                return out;\n            });\n            newConvo = _extends({}, currentConvo);\n            if (newConvo.id === action.id) {\n                newConvo.hidden = !newConvo.hidden;\n            }\n            return { history: newHistory, currentConvo: newConvo, state: state.state };\n        default:\n            return state;\n    }\n};\n\nvar variables = function variables() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.UPDATE_VARIABLES:\n            return action.variables;\n        default:\n            return state;\n    }\n};\n\nvar predictions = function predictions() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.UPDATE_PREDICTIONS:\n            return action.predictions;\n        default:\n            return state;\n    }\n};\n\nvar docs = function docs() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { title: '', examples: [], description: [], source: '' };\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.UPDATE_DOCS:\n            return action.doc;\n        default:\n            return state;\n    }\n};\n\nvar functionSearch = function functionSearch() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { search: '', results: [] };\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.UPDATE_FUNC:\n            return _extends({}, state, { search: action.search });\n        case types.UPDATE_RESULTS:\n            return _extends({}, state, { results: action.results });\n        default:\n            return state;\n    }\n};\n\nvar currentInput = function currentInput() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { 'input': '' };\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.STORE_CURRENT_INPUT:\n            return { 'input': action.currentInput };\n        default:\n            return state;\n    }\n};\n\nvar minimizeState = function minimizeState() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { 'docs': true, 'code_edit': true };\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.SET_DOCS:\n            return _extends({}, state, { 'docs': action.docs });\n        case types.SET_CODE_EDIT:\n            return _extends({}, state, { 'code_edit': action.code_edit });\n        default:\n            return state;\n    }\n};\n\nvar removeIndex = function removeIndex(arr, i) {\n    var first_half = arr.concat([]).slice(0, i);\n    var second_half = arr.concat([]).slice(i + 1, arr.length);\n    return first_half.concat(second_half);\n};\n\nvar commandEditPane = function commandEditPane() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { name: '', title: '', args: [], examples: [], command: '', explanation: '', testInput: '', preview: '', error: '' };\n    var action = arguments[1];\n\n    switch (action.type) {\n        case types.UPDATE_CODE_EDITOR:\n            var new_state = {};\n            new_state[action.name] = action.value;\n            return _extends({}, state, new_state);\n        case types.ADD_COMMAND_ARG:\n            return _extends({}, state, { args: state.args.concat([{ 'arg_name': '', 'arg_type': '', 'arg_string': '' }]) });\n        case types.ADD_COMMAND_EXAMPLE:\n            return _extends({}, state, { examples: state.examples.concat(['']) });\n        case types.UPDATE_COMMAND_EXAMPLE:\n            var newExamples = state.examples.concat([]);\n            newExamples[action.id] = action.text;\n            return _extends({}, state, { examples: newExamples });\n        case types.UPDATE_COMMAND_ARG:\n            var newArgs = state.args.concat([]);\n            newArgs[action.id] = action.values;\n            return _extends({}, state, { args: newArgs });\n        case types.DELETE_COMMAND_ARG:\n            return _extends({}, state, { args: removeIndex(state.args, action.id) });\n        case types.DELETE_COMMAND_EXAMPLE:\n            return _extends({}, state, { examples: removeIndex(state.examples, action.id) });\n        default:\n            return state;\n    }\n};\n\nvar inputHistory = function inputHistory() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { 'history': [], 'currId': null, 'showHistory': false };\n    var action = arguments[1];\n\n    var newId = void 0;\n    switch (action.type) {\n        case types.ADD_INPUT_HISTORY:\n            newId = state.currId;\n            if (state.history.length === 0 && newId === null) {\n                newId = 0;\n            }\n            return _extends({}, state, { 'history': [].concat(_toConsumableArray(state.history), [action.message]), 'currId': newId });\n        case types.MOVE_INPUT_HISTORY:\n            if (state.history.length === 0) {\n                return state;\n            }\n            newId = state.currId || 0;\n            if (action.direction === 'up') {\n                if (newId < state.history.length - 1) {\n                    newId += 1;\n                }\n            } else {\n                if (newId >= 1) {\n                    newId -= 1;\n                }\n            }\n            return _extends({}, state, { 'currId': newId });\n        default:\n            return state;\n    }\n};\n\nvar rootReducer = (0, _redux.combineReducers)({\n    conversation: conversation,\n    variables: variables,\n    predictions: predictions,\n    inputHistory: inputHistory,\n    currentInput: currentInput,\n    docs: docs,\n    functionSearch: functionSearch,\n    minimizeState: minimizeState,\n    commandEditPane: commandEditPane,\n    routing: _reactRouterRedux.routerReducer\n});\n\nexports.default = rootReducer;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvcmVkdWNlcnMvaW5kZXguanM/ZTkxNiJdLCJuYW1lcyI6WyJ0eXBlcyIsIl8iLCJ2YWx1ZU9yTnVsbCIsInZhbHVlIiwidW5kZWZpbmVkIiwiYXBwZW5kTWVzc2FnZXMiLCJvbGRNZXNzYWdlcyIsImFjdGlvbiIsIm5ld01lc3NhZ2VzIiwiY3VycmVudE1heCIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJtYXAiLCJtIiwiaWQiLCJtYXgiLCJ0ZXh0IiwicHVzaCIsIm9yaWdpbiIsInN0YXRlIiwiYXJnIiwiY29uY2F0IiwiYXBwZW5kTWVzc2FnZXNDb252byIsImNvbnZvIiwibWVzc2FnZXMiLCJhcmdzIiwiYXJnX21hcCIsImNvbnZlcnNhdGlvbiIsImhpc3RvcnkiLCJjdXJyZW50Q29udm8iLCJuZXdDb252byIsInR5cGUiLCJVUERBVEVfSElTVE9SWSIsIkFERF9NRVNTQUdFIiwiQUREX1NFUlZFUl9NRVNTQUdFIiwidGhlSWQiLCJ0aXRsZSIsImxhYmVsIiwiSElERV9DT05WRVJTQVRJT04iLCJuZXdIaXN0b3J5Iiwib3V0IiwiY29udiIsImhpZGRlbiIsInZhcmlhYmxlcyIsIlVQREFURV9WQVJJQUJMRVMiLCJwcmVkaWN0aW9ucyIsIlVQREFURV9QUkVESUNUSU9OUyIsImRvY3MiLCJleGFtcGxlcyIsImRlc2NyaXB0aW9uIiwic291cmNlIiwiVVBEQVRFX0RPQ1MiLCJkb2MiLCJmdW5jdGlvblNlYXJjaCIsInNlYXJjaCIsInJlc3VsdHMiLCJVUERBVEVfRlVOQyIsIlVQREFURV9SRVNVTFRTIiwiY3VycmVudElucHV0IiwiU1RPUkVfQ1VSUkVOVF9JTlBVVCIsIm1pbmltaXplU3RhdGUiLCJTRVRfRE9DUyIsIlNFVF9DT0RFX0VESVQiLCJjb2RlX2VkaXQiLCJyZW1vdmVJbmRleCIsImFyciIsImkiLCJmaXJzdF9oYWxmIiwic2xpY2UiLCJzZWNvbmRfaGFsZiIsImNvbW1hbmRFZGl0UGFuZSIsIm5hbWUiLCJjb21tYW5kIiwiZXhwbGFuYXRpb24iLCJ0ZXN0SW5wdXQiLCJwcmV2aWV3IiwiZXJyb3IiLCJVUERBVEVfQ09ERV9FRElUT1IiLCJuZXdfc3RhdGUiLCJBRERfQ09NTUFORF9BUkciLCJBRERfQ09NTUFORF9FWEFNUExFIiwiVVBEQVRFX0NPTU1BTkRfRVhBTVBMRSIsIm5ld0V4YW1wbGVzIiwiVVBEQVRFX0NPTU1BTkRfQVJHIiwibmV3QXJncyIsInZhbHVlcyIsIkRFTEVURV9DT01NQU5EX0FSRyIsIkRFTEVURV9DT01NQU5EX0VYQU1QTEUiLCJpbnB1dEhpc3RvcnkiLCJuZXdJZCIsIkFERF9JTlBVVF9ISVNUT1JZIiwiY3VycklkIiwibWVzc2FnZSIsIk1PVkVfSU5QVVRfSElTVE9SWSIsImRpcmVjdGlvbiIsInJvb3RSZWR1Y2VyIiwicm91dGluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7SUFBWUEsSzs7QUFDWjs7SUFBWUMsQzs7Ozs7O0FBRVosSUFBTUMsY0FBYyxTQUFkQSxXQUFjLENBQUNDLEtBQUQsRUFBVztBQUMzQixRQUFJQSxVQUFVQyxTQUFkLEVBQXlCO0FBQ3JCLGVBQU9ELEtBQVA7QUFDSDtBQUNELFdBQU8sSUFBUDtBQUNILENBTEQ7O0FBT0EsSUFBTUUsaUJBQWlCLFNBQWpCQSxjQUFpQixDQUFDQyxXQUFELEVBQWNDLE1BQWQsRUFBeUI7QUFBRTtBQUM5QyxRQUFNQyxjQUFjLEVBQXBCO0FBQ0EsUUFBSUMsYUFBYSxDQUFqQjtBQUNBLFFBQUlILFlBQVlJLE1BQVosR0FBcUIsQ0FBekIsRUFBNEI7QUFDeEJDLGdCQUFRQyxHQUFSLENBQVksS0FBWixFQUFtQlgsRUFBRVksR0FBRixDQUFNUCxXQUFOLEVBQW1CLFVBQVNRLENBQVQsRUFBWTtBQUFFLG1CQUFPQSxFQUFFQyxFQUFUO0FBQWMsU0FBL0MsQ0FBbkI7QUFDQU4scUJBQWFSLEVBQUVlLEdBQUYsQ0FBTWYsRUFBRVksR0FBRixDQUFNUCxXQUFOLEVBQW1CLFVBQVNRLENBQVQsRUFBWTtB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d0JBRmdDO0FBR2hDRSw0QkFIZ0M7QUFJaEMyQyw4QkFKZ0M7QUFLaEM5Qiw4QkFMZ0M7QUFNaENYLGNBTmdDO0FBT2hDTSxrQ0FQZ0M7QUFRaENPLGdDQVJnQztBQVNoQ1Usb0NBVGdDO0FBVWhDMEI7QUFWZ0MsQ0FBaEIsQ0FBcEI7O2tCQWFlRCxXIiwiZmlsZSI6IjQ1Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJvdXRlclJlZHVjZXIgYXMgcm91dGluZyB9IGZyb20gJ3JlYWN0LXJvdXRlci1yZWR1eCc7XG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9hY3Rpb25zL3R5cGVzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgdmFsdWVPck51bGwgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgYXBwZW5kTWVzc2FnZXMgPSAob2xkTWVzc2FnZXMsIGFjdGlvbikgPT4geyAvLyB0ZXh0LCBvcmlnaW4gPSAndXNlcicsIHR5cGUgPSBudWxsLCBhcmcgPSBudWxsKSA9PiB7XG4gICAgY29uc3QgbmV3TWVzc2FnZXMgPSBbXTtcbiAgICBsZXQgY3VycmVudE1heCA9IDA7XG4gICAgaWYgKG9sZE1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coJ21hcCcsIF8ubWFwKG9sZE1lc3NhZ2VzLCBmdW5jdGlvbihtKSB7IHJldHVybiBtLmlkOyB9KSk7XG4gICAgICAgIGN1cnJlbnRNYXggPSBfLm1heChfLm1hcChvbGRNZXNzYWdlcywgZnVuY3Rpb24obSkgeyByZXR1cm4gbS5pZDsgfSkpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG0gb2YgYWN0aW9uLnRleHQpIHtcbiAgICAgICAgY3VycmVudE1heCsrO1xuICAgICAgICBuZXdNZXNzYWdlcy5wdXNoKHsnb3JpZ2luJzogYWN0aW9uLm9yaWdpbiwgJ3RleHQnOiBtLCAnaWQnOiBjdXJyZW50TWF4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RhdGUnOiB2YWx1ZU9yTnVsbChhY3Rpb24uc3RhdGUpLCAnYXJnJzogdmFsdWVPck51bGwoYWN0aW9uLmFyZyl9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9sZE1lc3NhZ2VzLmNvbmNhdChuZXdNZXNzYWdlcyk7XG59O1xuXG5jb25zdCBhcHBlbmRNZXNzYWdlc0NvbnZvID0gKGNvbnZvLCBhY3Rpb24pID0+IHtcbiAgICBjb25zdCB7IG1lc3NhZ2VzIH0gPSBjb252bztcbiAgICByZXR1cm4geyAuLi5jb252bywgbWVzc2FnZXM6IGFwcGVuZE1lc3NhZ2VzKG1lc3NhZ2VzLCBhY3Rpb24pLCBhcmdzOiBhY3Rpb24uYXJnX21hcCB9O1xufTtcblxuY29uc3QgY29udmVyc2F0aW9uID0gKHN0YXRlID0geydoaXN0b3J5JzogW10sICdjdXJyZW50Q29udm8nOiB7ICdtZXNzYWdlcyc6IFtdLCAndGl0bGUnOiBudWxsLCAnaGlkZGVuJzogZmFsc2UsICdpZCc6IDAsICdhcmdzJzoge30gfSwgJ3N0YXRlJzogJ1NUQVJUJ30sIGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IHsgaGlzdG9yeSwgY3VycmVudENvbnZvIH0gPSBzdGF0ZTtcbiAgICBsZXQgbmV3Q29udm87XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzLlVQREFURV9ISVNUT1JZOlxuICAgICAgICAgICAgY29uc29sZS5sb2coYWN0aW9uLmNvbnZlcnNhdGlvbi5jdXJyZW50Q29udm8pO1xuICAgICAgICAgICAgcmV0dXJuIHsgaGlzdG9yeTogYWN0aW9uLmNvbnZlcnNhdGlvbi5oaXN0b3J5LCBjdXJyZW50Q29udm86IGFjdGlvbi5jb252ZXJzYXRpb24uY3VycmVudENvbnZvLCAnc3RhdGUnOiBzdGF0ZS5zdGF0ZSB9O1xuICAgICAgICBjYXNlIHR5cGVzLkFERF9NRVNTQUdFOlxuICAgICAgICAgICAgcmV0dXJuIHsgaGlzdG9yeSwgY3VycmVudENvbnZvOiBhcHBlbmRNZXNzYWdlc0NvbnZvKGN1cnJlbnRDb252bywgYWN0aW9uKSwgJ3N0YXRlJzogc3RhdGUuc3RhdGUgfTtcbiAgICAgICAgY2FzZSB0eXBlcy5BRERfU0VSVkVSX01FU1NBR0U6XG4gICAgICAgICAgICBpZiAoYWN0aW9uLnRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Q29udm8gPSBhcHBlbmRNZXNzYWdlc0NvbnZvKGN1cnJlbnRDb252bywgYWN0aW9uKTtcbiAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdGUgPT09ICdTVEFSVCcpIHtcbiAgICAgICAgICAgICAgICAvLyBoYXJkY29kaW5nIHNvbWUgbG9naWMgaGVyZSBmb3Igc3luY2luZyBoaXN0b3J5IHdpdGggc2VydmVyIG9uIFNUQVJUXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBhbGxvd3Mgc29tZSBjb21tYW5kcyB0byBvdmVyd3JpdGUgaGlzdG9yeSBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgIGxldCB0aGVJZCA9IGFjdGlvbi5oaXN0b3J5Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICBuZXdDb252byA9IHsuLi5uZXdDb252bywgdGl0bGU6IGFjdGlvbi5sYWJlbCwgaWQ6IHRoZUlkIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgaGlzdG9yeTogYWN0aW9uLmhpc3RvcnkuY29uY2F0KFtuZXdDb252b10pLCAnY3VycmVudENvbnZvJzogeyAnbWVzc2FnZXMnOiBbXSwgJ3RpdGxlJzogbnVsbCwgJ2hpZGRlbic6IGZhbHNlLCAnaWQnOiBuZXdDb252by5pZCArIDEsICdhcmdzJzoge30gfSwgc3RhdGU6ICdTVEFSVCcgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGhpc3RvcnksIGN1cnJlbnRDb252bzogbmV3Q29udm8sIHN0YXRlOiBhY3Rpb24uc3RhdGUgfTtcbiAgICAgICAgY2FzZSB0eXBlcy5ISURFX0NPTlZFUlNBVElPTjpcbiAgICAgICAgICAgIGNvbnN0IG5ld0hpc3RvcnkgPSBfLm1hcChoaXN0b3J5LCBjb252ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXQgPSB7Li4uY29udn07XG4gICAgICAgICAgICAgICAgaWYgKGNvbnYuaWQgPT09IGFjdGlvbi5pZCkge1xuICAgICAgICAgICAgICAgICAgICBvdXQuaGlkZGVuID0gIW91dC5oaWRkZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ld0NvbnZvID0gey4uLmN1cnJlbnRDb252b307XG4gICAgICAgICAgICBpZiAobmV3Q29udm8uaWQgPT09IGFjdGlvbi5pZCkge1xuICAgICAgICAgICAgICAgIG5ld0NvbnZvLmhpZGRlbiA9ICFuZXdDb252by5oaWRkZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBoaXN0b3J5OiBuZXdIaXN0b3J5LCBjdXJyZW50Q29udm86IG5ld0NvbnZvLCBzdGF0ZTogc3RhdGUuc3RhdGV9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbmNvbnN0IHZhcmlhYmxlcyA9IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXMuVVBEQVRFX1ZBUklBQkxFUzpcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24udmFyaWFibGVzO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbmNvbnN0IHByZWRpY3Rpb25zID0gKHN0YXRlID0gW10sIGFjdGlvbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlcy5VUERBVEVfUFJFRElDVElPTlM6XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLnByZWRpY3Rpb25zO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbmNvbnN0IGRvY3MgPSAoc3RhdGUgPSB7dGl0bGU6ICcnLCBleGFtcGxlczogW10sIGRlc2NyaXB0aW9uOiBbXSwgc291cmNlOicnfSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzLlVQREFURV9ET0NTOlxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbi5kb2M7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcblxuY29uc3QgZnVuY3Rpb25TZWFyY2ggPSAoc3RhdGUgPSB7c2VhcmNoOiAnJywgcmVzdWx0czogW119LCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSl7XG4gICAgY2FzZSB0eXBlcy5VUERBVEVfRlVOQzpcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsIHNlYXJjaDogYWN0aW9uLnNlYXJjaH07XG4gICAgY2FzZSB0eXBlcy5VUERBVEVfUkVTVUxUUzpcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsIHJlc3VsdHM6IGFjdGlvbi5yZXN1bHRzfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5jb25zdCBjdXJyZW50SW5wdXQgPSAoc3RhdGUgPSB7J2lucHV0JzogJyd9LCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSl7XG4gICAgY2FzZSB0eXBlcy5TVE9SRV9DVVJSRU5UX0lOUFVUOlxuICAgICAgcmV0dXJuIHsnaW5wdXQnOiBhY3Rpb24uY3VycmVudElucHV0fTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5jb25zdCBtaW5pbWl6ZVN0YXRlID0gKHN0YXRlPXsnZG9jcyc6IHRydWUsICdjb2RlX2VkaXQnOnRydWV9LCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSl7XG4gICAgY2FzZSB0eXBlcy5TRVRfRE9DUzpcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsICdkb2NzJzogYWN0aW9uLmRvY3N9O1xuICAgIGNhc2UgdHlwZXMuU0VUX0NPREVfRURJVDpcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsICdjb2RlX2VkaXQnOiBhY3Rpb24uY29kZV9lZGl0fTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5jb25zdCByZW1vdmVJbmRleCA9IChhcnIsIGkpID0+IHtcbiAgbGV0IGZpcnN0X2hhbGYgPSBhcnIuY29uY2F0KFtdKS5zbGljZSgwLCBpKTtcbiAgbGV0IHNlY29uZF9oYWxmID0gYXJyLmNvbmNhdChbXSkuc2xpY2UoaSsxLGFyci5sZW5ndGgpO1xuICByZXR1cm4gZmlyc3RfaGFsZi5jb25jYXQoc2Vjb25kX2hhbGYpO1xufVxuXG5jb25zdCBjb21tYW5kRWRpdFBhbmUgPSAoc3RhdGU9e25hbWU6ICcnLCB0aXRsZTogJycsIGFyZ3M6IFtdLCBleGFtcGxlczogW10sIGNvbW1hbmQ6ICcnLCBleHBsYW5hdGlvbjogJycsIHRlc3RJbnB1dDogJycsIHByZXZpZXc6JycsIGVycm9yOiAnJ30sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKXtcbiAgICBjYXNlIHR5cGVzLlVQREFURV9DT0RFX0VESVRPUjpcbiAgICAgIGxldCBuZXdfc3RhdGUgPSB7fTtcbiAgICAgIG5ld19zdGF0ZVthY3Rpb24ubmFtZV0gPSBhY3Rpb24udmFsdWU7XG4gICAgICByZXR1cm4gey4uLnN0YXRlLCAuLi5uZXdfc3RhdGV9O1xuICAgIGNhc2UgdHlwZXMuQUREX0NPTU1BTkRfQVJHOlxuICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgYXJnczogc3RhdGUuYXJncy5jb25jYXQoW3snYXJnX25hbWUnOiAnJywgJ2FyZ190eXBlJzogJycsICdhcmdfc3RyaW5nJzogJyd9XSl9O1xuICAgIGNhc2UgdHlwZXMuQUREX0NPTU1BTkRfRVhBTVBMRTpcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsIGV4YW1wbGVzOiBzdGF0ZS5leGFtcGxlcy5jb25jYXQoWycnXSl9O1xuICAgIGNhc2UgdHlwZXMuVVBEQVRFX0NPTU1BTkRfRVhBTVBMRTpcbiAgICAgIGxldCBuZXdFeGFtcGxlcyA9IHN0YXRlLmV4YW1wbGVzLmNvbmNhdChbXSk7XG4gICAgICBuZXdFeGFtcGxlc1thY3Rpb24uaWRdID0gYWN0aW9uLnRleHQ7XG4gICAgICByZXR1cm4gey4uLnN0YXRlLCBleGFtcGxlczogbmV3RXhhbXBsZXN9O1xuICAgIGNhc2UgdHlwZXMuVVBEQVRFX0NPTU1BTkRfQVJHOlxuICAgICAgbGV0IG5ld0FyZ3MgPSBzdGF0ZS5hcmdzLmNvbmNhdChbXSk7XG4gICAgICBuZXdBcmdzW2FjdGlvbi5pZF0gPSBhY3Rpb24udmFsdWVzO1xuICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgYXJnczogbmV3QXJnc307XG4gICAgY2FzZSB0eXBlcy5ERUxFVEVfQ09NTUFORF9BUkc6XG4gICAgICByZXR1cm4gey4uLnN0YXRlLCBhcmdzOiByZW1vdmVJbmRleChzdGF0ZS5hcmdzLCBhY3Rpb24uaWQpfTtcbiAgICBjYXNlIHR5cGVzLkRFTEVURV9DT01NQU5EX0VYQU1QTEU6XG4gICAgICByZXR1cm4gey4uLnN0YXRlLCBleGFtcGxlczogcmVtb3ZlSW5kZXgoc3RhdGUuZXhhbXBsZXMsIGFjdGlvbi5pZCl9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmNvbnN0IGlucHV0SGlzdG9yeSA9IChzdGF0ZSA9IHsnaGlzdG9yeSc6IFtdLCAnY3VycklkJzogbnVsbCwgJ3Nob3dIaXN0b3J5JzogZmFsc2UgfSwgYWN0aW9uKSA9PiB7XG4gICAgbGV0IG5ld0lkO1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlcy5BRERfSU5QVVRfSElTVE9SWTpcbiAgICAgICAgICAgIG5ld0lkID0gc3RhdGUuY3VycklkO1xuICAgICAgICAgICAgaWYgKHN0YXRlLmhpc3RvcnkubGVuZ3RoID09PSAwICYmIG5ld0lkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3SWQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgJ2hpc3RvcnknOiBbLi4uc3RhdGUuaGlzdG9yeSwgYWN0aW9uLm1lc3NhZ2VdLCAnY3VycklkJzogbmV3SWR9O1xuICAgICAgICBjYXNlIHR5cGVzLk1PVkVfSU5QVVRfSElTVE9SWTpcbiAgICAgICAgICAgIGlmIChzdGF0ZS5oaXN0b3J5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0lkID0gc3RhdGUuY3VycklkIHx8IDA7XG4gICAgICAgICAgICBpZiAoYWN0aW9uLmRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgICAgICAgICAgICAgIGlmIChuZXdJZCA8IChzdGF0ZS5oaXN0b3J5Lmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0lkICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3SWQgPj0gMSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdJZCAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7Li4uc3RhdGUsICdjdXJySWQnOiBuZXdJZCB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbmNvbnN0IHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcbiAgICBjb252ZXJzYXRpb24sXG4gICAgdmFyaWFibGVzLFxuICAgIHByZWRpY3Rpb25zLFxuICAgIGlucHV0SGlzdG9yeSxcbiAgICBjdXJyZW50SW5wdXQsXG4gICAgZG9jcyxcbiAgICBmdW5jdGlvblNlYXJjaCxcbiAgICBtaW5pbWl6ZVN0YXRlLFxuICAgIGNvbW1hbmRFZGl0UGFuZSxcbiAgICByb3V0aW5nXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdFJlZHVjZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvcmVkdWNlcnMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ })

})