REGISTERING AS get length of array {arr} ['get length of array {arr}', 'array {arr} length']
REGISTERING AS generate a random number ['generate a random number', 'generate number']
REGISTERING AS generate a random float ['generate a random float', 'generate float']
REGISTERING AS generate a random array of {n} numbers ['generate a random array of {n} numbers', 'generate numpy array of size {n}']
REGISTERING AS add two numbers: {x} and {y} ['add two numbers: {x} and {y}', 'add {x} and {y}', 'add {x} {y}', 'can you add {x} and {y}']
REGISTERING AS divide two numbers: {x} and {y} ['divide two numbers: {x} and {y}', 'divide {x} and {y}', 'divide {x} {y}']
REGISTERING AS print {value} ['print {value}', 'display {value}', '{value}', 'show me {value}']
REGISTERING AS load csv data from {file} ['load csv data from {file}', 'load csv {file}']
REGISTERING AS list columns from {dataframe} ['list columns from {dataframe}', 'list columns {dataframe}']
REGISTERING AS get {column} from {dataframe} ['get {column} from {dataframe}', 'get {column} {dataframe}']
REGISTERING AS filter {data} with {column} less than {number} ['filter {data} with {column} less than {number}', 'filter {data} {column} < {number}']
REGISTERING AS filter {data} with {column} greater than {number} ['filter {data} with {column} greater than {number}', 'filter {data} {column} > {number}']
REGISTERING AS selector test ['selector test']
REGISTERING AS save environment to {name} ['save environment to {name}', 'save environment {name}', 'save env to {name}']
REGISTERING AS load environment from {name} ['load environment from {name}', 'load environment {name}', 'load env from {name}']
REGISTERING AS save {value} to {name} ['save {value} to {name}', 'save {value} as {name}', 'save that {value} to {name}']
REGISTERING AS rename {name1} to {name2} ['rename {name1} to {name2}', 'change name {value} to {name}']
REGISTERING AS delete {name1} ['delete {name1}', 'remove {name1} from environment']
REGISTERING AS make a classification model: {features} to predict {classes} ['make a classification model: {features} to predict {classes}', 'build a new classification model', 'make a new classification model', 'classifier using {features} to predict {classes}', 'logistic regression model', 'logistic classifier']
REGISTERING AS make a regression model: {features} to predict {classes} ['make a regression model: {features} to predict {classes}', 'build a new regression model', 'make a new regression model', 'regression using {features} to predict {classes}']
REGISTERING AS lasso feature selection for {model} with L1 of {regularization} ['lasso feature selection for {model} with L1 of {regularization}', 'feature selection for {model} via lasso']
REGISTERING AS change {feature} in {dataframe} to {new_type} ['change {feature} in {dataframe} to {new_type}', 'change feature {feature} in dataframe {dataframe} to {type}']
REGISTERING AS remove {feature} from {dataframe} ['remove {feature} from {dataframe}', 'remove feature {feature} from {dataframe}']
REGISTERING AS vectorize {column} in {dataframe} ['vectorize {column} in {dataframe}', 'make word vectors for {feature} in dataframe {dataframe}']
REGISTERING AS select one or more features / columns ['select one or more features / columns', 'create a new group of features', 'create a feature set', 'select columns from dataframe', 'select a group of features']
REGISTERING AS show {model} coefficients ['show {model} coefficients', 'feature coefficients for model {model}', 'feature relationship coefficients', 'features coefficients', 'get coefficient']
REGISTERING AS create training and test data splits ['create training and test data splits', 'create train test data', 'split data into train and test']
REGISTERING AS train {model} on {data} ['train {model} on {data}', 'train {model} {data}', 'train model {model} on data {data}']
REGISTERING AS test {iris_model} on {iris_data} using f1 score with {weighting} ['test {iris_model} on {iris_data} using f1 score with {weighting}', 'test {iris_model} {iris_data} with {weighting}', 'test model {iris_model} on data {data} with {weighting}']
REGISTERING AS cross-validate classification {model} with {score} and {n} folds ['cross-validate classification {model} with {score} and {n} folds', 'cross-validate classification {model} {score} {n}', 'evaluate classifier performance', 'cross-validate {model}']
REGISTERING AS cross-validate regression {model} with {score} and {n} folds ['cross-validate regression {model} with {score} and {n} folds', 'cross-validate regression {model} {score} {n}', 'evaluate regression performance']
REGISTERING AS compare {model1} and {model2} using {metric} ['compare {model1} and {model2} using {metric}', 'compare {model1} {model2} using {metric}', 'which model is better under {metric}, {model1} or {model2}']
REGISTERING AS find the best l2 regularization parameter for {model} with {metric} ['find the best l2 regularization parameter for {model} with {metric}', 'best regularization for {model} {metric}', 'best l2 parameter for {model} under {metric}']
REGISTERING AS compute auc curve data for {model} ['compute auc curve data for {model}', 'auc curve {model}', 'auc data for {model}']
REGISTERING AS plot auc curve from {data} ['plot auc curve from {data}', 'plot auc data {data}', 'plot {data} auc']
REGISTERING AS plot auc curve for {model} ['plot auc curve for {model}', 'plot auc curve for model {model}']
REGISTERING AS plot two-sample test {data} ['plot two-sample test {data}', 'plot p-values {data}']
REGISTERING AS plot a histogram on {data} ['plot a histogram on {data}', 'plot histogram {data}', 'histogram {data}']
REGISTERING AS plot bars {data1} {data2} ['plot bars {data1} {data2}', 'plot barchart {data1} {data2}', 'barchart {data1} {data2}']
REGISTERING AS take mean of {array} ['take mean of {array}', 'mean of {array} of numbers', 'mean {array}', 'average of {array}', 'average value of {array}']
REGISTERING AS log-transform {array} ['log-transform {array}', 'log-transform {array} of numbers', 'log {array}', 'log of {array}', 'log value of {array}']
REGISTERING AS compute pearson correlation: {x} and {y} ['compute pearson correlation: {x} and {y}', 'pearson correlation between {x} and {y}', 'pearson correlation {x} {y}', 'how are {x} and {y} correlated']
REGISTERING AS find quartiles {array} ['find quartiles {array}']
REGISTERING AS two-sample statistical test {stats_test} on columns in {data1} and {data2} ['two-sample statistical test {stats_test} on columns in {data1} and {data2}', 'two-sample {stats_test} on columns in {data1} {data2}']
REGISTERING AS apply bonferroni correction to {data} ['apply bonferroni correction to {data}', 'bonferroni {data}']
REGISTERING AS apply holm correction to {data} ['apply holm correction to {data}', 'holm {data}']
REGISTERING AS show significant values for {data} ['show significant values for {data}', 'significant values {data}']
REGISTERING AS calculate two sample Student t-test on {x} and {y} ['calculate two sample Student t-test on {x} and {y}', 'Student t-test on {x} {y}', 'statistical test', 'two sample statistical test', 'test statistic']
REGISTERING AS calculate Welch t-test on {x} and {y} ['calculate Welch t-test on {x} and {y}', 'Welch t-test on {x} and {y}', 'statistical test', 'two sample statistical test', 'statistical']
REGISTERING AS calculate Mann-Whitney U test on {x} and {y} ['calculate Mann-Whitney U test on {x} and {y}', 'Mann-Whitney U test on {x} and {y}', 'statistical test', 'two sample statistical test']
REGISTERING AS help me run a t-test ['help me run a t-test']
REGISTERING AS test workloop ['test workloop']
REGISTERING AS while statement ['while statement']
REGISTERING AS if statement ['if statement']
REGISTERING AS poke holes ['poke holes']
REGISTERING AS convert entire interaction into a Python script ['convert entire interaction into a Python script']
REGISTERING AS inspect code for previous command ['inspect code for previous command']
REGISTERING AS save last iris command as {name} ['save last iris command as {name}', 'save last iris command {name}']
REGISTERING AS run liwc analysis on {documents} ['run liwc analysis on {documents}', 'liwc {documents}']
REGISTERING AS select the most positive coefficients for {class_name} in {coefficients} ['select the most positive coefficients for {class_name} in {coefficients}']
REGISTERING AS compute Go term enrichment on {gene_list} ['compute Go term enrichment on {gene_list}', 'compute Go term enrichment on a list of gene symbols']
REGISTERING AS generate empath category ['generate empath category', 'empath category']
REGISTERING AS analyze topics in {documents} ['analyze topics in {documents}', 'empath {documents}']
REGISTERING AS get tweets from {user} ['get tweets from {user}', 'tweet from {user}', 'what has {user} tweeted on twitter']
REGISTERING AS search tweets ['search tweets', 'search tweet for term on twitter']
